datasource
{
    file = "5000-8fff.bin"
    origin = $5000
}

annotate {

$53b0 v'''
    0  : Offset
    1&2: Adjust 

    CaveCurrentCellPtr points to the NW cell and the cell in consideration is at
    'C' (that's why you see a lot of offsets of $29 in the code). 
    ---------------------
    |NW:$00|N:$01|NE:$02|
    |------+-----+------|
    | W:$28|C:$29| E:$2a|
    |------+-----+------|
    |SW:$50|S:$51|SE:$52|
    |======+=====+======|
    |   $78|  $79|   $7a|
    ---------------------

    InflatedCaveCurrentCellPtr points to the cell in consideration ('C'). Since
    each cell in the cave is 2x2 characters in the inflated cave the offsets
    are as follows (I'm not sure what the extra bits hanging off the sides are
    for yet).
            ------------------------
            |NW:-162|N:-160|NE:-158|
     -------+-------+------|-------|-------
    |   -4  | W:-2  |C: 0  | E:+2  |   +4  |
     -------+-------+------|-------|-------
            |SW:+158|S:+160|SE:+162|
            |=======+======+=======|
            |   +318|  +320|   +322|
            ------------------------

    This table translates offsets as specified in the first scheme to ones in the second.

    Offset: 0($00)  Adjust: -162
    Offset: 1($01)  Adjust: -160
    Offset: 2($02)  Adjust: -158
    Offset: 40($28) Adjust: -2
    Offset: 39($27) Adjust: -4
    Offset: 41($29) Adjust: 0
    Offset: 42($2a) Adjust: 2
    Offset: 43($2b) Adjust: 4
    Offset: 80($50) Adjust: 158
    Offset: 81($51) Adjust: 160
    Offset: 82($52)     Adjust: 162
    Offset: 120($78)    Adjust: 318
    Offset: 121($79)    Adjust: 320
    Offset: 122($7a)    Adjust: 322
'''
$53da v"Inflated Cave: $4003 - $4dc2"
$582e '''
    CaveNumber
    MagicWallMillingTimeOrAmoeba3PercentMax
    InitialDiamondValue
    ExtraDiamondValue
    InitialRandomSeedForSublevel1
    InitialRandomSeedForSublevel2
    InitialRandomSeedForSublevel3
    InitialRandomSeedForSublevel4
    InitialRandomSeedForSublevel5
    DiamondsNeededForSublevel1
    DiamondsNeededForSublevel2
    DiamondsNeededForSublevel3
    DiamondsNeededForSublevel4
    DiamondsNeededForSublevel5
    CaveTimeForSublevel1
    CaveTimeForSublevel2
    CaveTimeForSublevel3
    CaveTimeForSublevel4
    CaveTimeForSublevel5
    BackgroundColour1
    BackgroundColour2
    ForegroundColour
    ?
    ?
    RandomObjectNumber1
    RandomObjectNumber2
    RandomObjectNumber3
    RandomObjectNumber4
    ProbabilityOfObject1
    ProbabilityOfObject2
    ProbabilityOfObject3
    ProbabilityOfObject4
    /\ 32($20) bytes length /\
'''
$582e v'''
    Variable \/
    struct
    {
    CmdObj;
    Params[];
    } Objects[]
    
    76543210
    ccoooooo
    c: Command
    o: Object
    
    Commands:
    $00 - Single(x, y)
    $40 - Line(x, y, len, dir) --- enum dir {N=0, NE=1, E=2, SE=3, S=4, SW=5, W=6, NW=7};
    $80 - FilledRect(x, y, width, height, interior)
    $c0 - Rect(x, y, width, height)
    
    Objects:
    $00 - Empty (. [space])
    $01 - Dirt (A)
    $02 - Wall (B)
    $03 - Magic wall (C)
    $04 - Exit (D)
    $07 - Steel wall (G)
    $08 - Firefly (H)
    $10 - Boulder (P)
    $14 - Diamond (T)
    $25 - Inbox (%)
    $30 - Butterfly (0 [number])
    $32 - Butterfly (2)
    $3a - Amoeba (:)
'''
$585f '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GAAAAAA.AATAP.AAAAAPAPAAAAAAA.AAAAPAAAAG
    >C:08a0 GAP%PAAAAAA.AAAAAAAAAPTAAPAAAA.AAAAA.AAG
    >C:08c8 GAAAAAAAAAA.AAPAAAAAPAPAAPAAAAAAAAPAAAAG
    >C:08f0 GPAPPAAAAAAAAAPAAAAAAPAAPAAAAPAAAPAAAAAG
    >C:0918 GPA.PAAAAAAAAA.PAAPAAAAAAAAPAAAAAAPAPPAG
    >C:0940 GAAA.AAPAAAAAAAAPAAAAAPA.PAAAAAAAAPAPPAG
    >C:0968 GBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAPAAPAG
    >C:0990 GA.AAAPAATA.AAPAPAAAAAAAAAATAPTAAAAAA.AG
    >C:09b8 GAATAAAAAPAAAAA.AAAAAAAAPP.PAAPAAAAPAAAG
    >C:09e0 GAAAPAAPAPAAAAAAAAAAAAAAP.APAAPAAAAAAAAG
    >C:0a08 GAPAAAAAPAAAAAAAAPPPAAAAAAAPAA.ATAAAAPAG
    >C:0a30 GATAA.AAPA..AAAAAPAPTAATAAAAPAAAPAATA.AG
    >C:0a58 GA.PAAAAAAAAAAAAAAP.PAAPAAAAAAAATAAAAAPG
    >C:0a80 GAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBG
    >C:0aa8 G.PAAAAAAAAAPAAATAAAAPAAAAAPAAAPAAAAAAAG
    >C:0ad0 G.PAAAAAAAAA.PAAPAAAAAAAAPAAAAAAPAPPAADG
    >C:0af8 GA.AAPAAAAAAAAPAAAAAPA..AAAATAAAPAPPAAAG
    >C:0b20 GAAAAPTAAPAAAAAAAAPAAAAAAPAPTAAAAAAPAAAG
    >C:0b48 GAAA.AAPA.AAPAPPAAAAAAAAAPAPTAAAAAA.AAPG
    >C:0b70 GATAAAA.AAAAA.AAAAAAAAA.APAAPAAAAPAAAPAG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$58b8 '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GAPAAPAABAPAAATABAAA.APABPAAAAAABAAPPAAG
    >C:08a0 GAAAAAAABAAAAAAPBPPA.AAAB.AATAAABAAAAPAG
    >C:08c8 G......................................G
    >C:08f0 GTAAAAAABAPAAAAPBAPA.AA.BAAPAATABAAPAPAG
    >C:0918 GAAAAAAABAPAAAAPBAPA.PAABAAAAAPABAAA.AAG
    >C:0940 GBBBBBBBBBBBBBBBBBBB.BBBBBBBBBBBBBBBBBBG
    >C:0968 GAAAAPPABAAPAAAABAAA.AAPBAAAAPAABAAAAAPG
    >C:0990 GAAAAAAABAA.AAAABAAA.AAABAAAAPA.BAAAAAPG
    >C:09b8 G......................................G
    >C:09e0 GPAAPAAABAAAAPAABAAP.AAABAAAAAATBPAAAAAG
    >C:0a08 GPAAAAPABAAPAAPABAAA.A.PBAAAAAAABPAAAPAG
    >C:0a30 GAPAAAAABAAAPAAABAAA.A.PBAAAAAAAB.PAAPAG
    >C:0a58 GBBBBBBBBBBBBBBBBBBB.BBBBBBBBBBBBBBBBBBG
    >C:0a80 GPA..HAABAAAAPAPBAAA.AAABAPTAAPABAAAAAAG
    >C:0aa8 GAAAAAPABPAAAAAABAAT.AAAB.AAPAAABAPAPPAG
    >C:0ad0 G......................................G
    >C:0af8 GTAA.APABPAAAAPABAPA.AAPBAPAPAAABAAAAAAG
    >C:0b20 GAAAAAPABPAATAAABAAA.PAABAAPAAAABAAAPP.G
    >C:0b48 GATAAA.PBAAPAAAABA%T.PAABA.AAAAABAAAPP.G
    >C:0b70 GAPAAAA.BAA.AAPABADA.AAABAAAAPAPBAAAA.AG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$58df '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GPABBABPPABAAAPBPAAPAAAABAAAPAAAAAPBATAG
    >C:08a0 GAA%BATAPABAAABBBAABAPAAAAPAAPAPAAABABPG
    >C:08c8 GAAAABAAPTAAPAAAABAAAAAPABBPAAAAAAABABBG
    >C:08f0 GTABAABPBPAAPAAAABAAAPAAAAAAPAPPAAAAAABG
    >C:0918 GPABAAABAAPABBAAPABBTAAAAAAAPAPPAAAAAABG
    >C:0940 GPPAAPAAAABAAAPAAAAAAPAPPAAAAAAPAATBBAAG
    >C:0968 GAAPABBAAPAPPAAABAAAAPAPPAAAAAABAAPABAPG
    >C:0990 GAABAAATAAAAAATAPAABBPAAPABABPAABPAATAPG
    >C:09b8 GPAPAAAABABBAATAPAABBPAAPAATABAAABAAPABG
    >C:09e0 GAPABBAAAAAPPBPAATABABPAABPAAABPAATAPAAG
    >C:0a08 GBABBAAAAAAPPBPAAPABABBAAABAAPABBAAPABBG
    >C:0a30 GABAPAPABAAABBPAAPAAAABAAAPAAAAABBAPABBG
    >C:0a58 GABAPAPABATABABPAABPAAAAPAAPAPPAAAABAAAG
    >C:0a80 GBAABPBPAAPAAAABAAATAAABAPBAAAAAABABBATG
    >C:0aa8 GBAAABBPAABATAAABPAAPAPAAAPABPAAAAAABAAG
    >C:0ad0 GBATAAAAPABBAAPABBPAAAAAAAPABPAAAAAABAAG
    >C:0af8 GAAPAAAABAAAPAAAAAAPAPPAAAAAABAAPABAAABG
    >C:0b20 GPABBAAPABBAAABAAAAPAPPAAAAAABAAPTAAPAAD
    >C:0b48 GBAAAPAAAAAAPAPTAAAAAAPAAABBAABPAATABAAG
    >C:0b70 GPPAAABAAAAAPAPTAAAAAABAAPABTATAPBAPAAAG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$592a '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 G%AAAAAPAAAAAAAAAAAAAAAAAAAAPAAAAAAAAPAG
    >C:08a0 GAAAAAPAAAAAAAAAAAAAAPAAAAAAAAAAAAAAAAAG
    >C:08c8 GAAAAAAAAPAAPAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:08f0 GPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0918 GAAAAAAAAAAAAAAAAAAAPAAAAAAAAAAAAAAAAAAG
    >C:0940 GAPAAAAAAAAAAAAAAAAAAAAAPAAAAAAAAAPAAAAG
    >C:0968 GAAPAAAAAPAAAAAAAAAAAPAAPAAAAAAAAAAAAAPG
    >C:0990 GAAAAAAPAAAAAAPAAAAAAAAAAAAAAAAAAAAAPAAG
    >C:09b8 GAAAAAAAA.0AAAPAA.0AAAAAA.0AAAAAA.0AAAAG
    >C:09e0 GAAAAAAAA..AAAPAA..AAAAAA..AAAAAA..APAAG
    >C:0a08 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0a30 GAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAAAG
    >C:0a58 GAAAPAAAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0a80 GAAAAAAPAAAAAAAAAAAPAAAAAAAAAAAAAAAAAAPG
    >C:0aa8 GAAAAAAAAAAAPAAAAAAAPAAAAAAAAAAAAAAAAAAG
    >C:0ad0 GAAPAAAAAAAAAAAAAAPAAAAAAAAAAAAAAAAAAAAG
    >C:0af8 GAAAAAAAAAAAAAAAAAAAAAPAAAAAAAAAPAAAAAAG
    >C:0b20 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAAPAAG
    >C:0b48 GAAAAPAAAAAAPAPPAAAAAAAAAAAAAAAAAAPAAAAG
    >C:0b70 GAAAAAAAAAAAPAPPAAAAAAAAAPAAPAPAAAAAAADG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$59b1 '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 G%AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:08a0 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:08c8 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:08f0 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0918 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0940 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0968 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0990 GAAAAAAA..HAAAAA..HAAAAA..HAAAAA..HAAAAG
    >C:09b8 GAAAAAAA...AAAAA...AAAAA...AAAAA...AAAAG
    >C:09e0 GAAAAAAA.T.AAAAA.T.AAAAA.T.AAAAA.T.AAAAG
    >C:0a08 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0a30 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0a58 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0a80 GAAAAAAA..HAAAAA..HAAAAA..HAAAAA..HAAAAG
    >C:0aa8 GAAAAAAA...AAAAA...AAAAA...AAAAA...AAAAG
    >C:0ad0 GAAAAAAA.T.AAAAA.T.AAAAA.T.AAAAA.T.AAAAG
    >C:0af8 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0b20 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0b48 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0b70 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5a42 '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GBBBBBBBBBAAAAPAPAAPAAAAAAAAPABBBBBBBBBG
    >C:08a0 GB........AAAAAAAAAAAPAAAAPAAA........BG
    >C:08c8 GB.TH.....AAPAAAAAAAAAAPAAAPAA.....HT.BG
    >C:08f0 GBBBBBBBBBAAPAAAAAAAAPAAAAAAPABBBBBBBBBG
    >C:0918 GB........AAAAAAPAAAPAAAAAAAPA........BG
    >C:0940 GB.TH.....AAAAPAAAAAAPAPPAAAAA.....HT.BG
    >C:0968 GBBBBBBBBBAPPAAAAAAAAPAPPAAAAABBBBBBBBBG
    >C:0990 GB........AAAAPAPAAAAPAAPAAAAA........BG
    >C:09b8 GB.TH.....AAAAPAPAAAAPAAPAAPAA.....HT.BG
    >C:09e0 GBBBBBBBBBAPPAPAAPAAAAPAAAPAAABBBBBBBBBG
    >C:0a08 GB........APPAPAAPAAAAAAAAAAAA........BG
    >C:0a30 GB.TH.....AAAAPAAPAAAAAAAAPAAA.....HT.BG
    >C:0a58 GBBBBBBBBBAAAAAPAAAPAAAAPAAPAABBBBBBBBBG
    >C:0a80 GAAAAPAPAAPAAAAAAAAPAAAAAPAAAAAAAAAAAAPG
    >C:0aa8 GAAAAAAPAAAAPAAAAPAAPAPAAAPAAPAAAAAAAAAG
    >C:0ad0 GAAPAAAAPAAAAAPAAAPAAAAAAAPAAPAAAAAAAAAG
    >C:0af8 GAAPAAAAAAAAPAAAAAAPAPPAAAAAAAAAPAAAAAAG
    >C:0b20 GPA%AAAPAAAAAAAAAAAPAPPAAAAAAAAAPPAAPADG
    >C:0b48 GAAAAPAAAAAAPAPPAAAAAAPAAAAAAAAPAAPAAAAG
    >C:0b70 GPPAAAAAAAAAPAPPAAAAAAAAAPAAPAPAPAAPAAAG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5a8a '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GA.AA.APPAAAAA.AAPA.%AAAA.PP.PAAPA.A..AG
    >C:08a0 G.AAPA.AA.A..AAAA.APAPA.AAA..PAAPATAA.AG
    >C:08c8 GPAAAAA..AHA..AAA.APAPA.AAA.BBBBBBBBBBBG
    >C:08f0 GAPATAAA.A..AAAAAA.AAPPAAPAAAA.A.AAA.A.G
    >C:0918 GBBBBBBBBBBBBAPA.AA...PAA.AAAA.AAAPAAAAD
    >C:0940 GPA.PAAAAAA.AAPA.AAA.AAPA..AAPA..HAAAAAG
    >C:0968 GPA.PAAAAAA.AA.PAAPAAAA.AAAPAAAAAAPAPPAG
    >C:0990 GAAA.AAP..AAA.AAPA..AAPA..AAA.AAAAPAPPAG
    >C:09b8 GAAA.AAPA.APAAAA.AAAHAAAAAAPAPAA..PAAPAG
    >C:09e0 G..AA.PAAAA.AAPAPAAAA.A..AAAAAAA..TAA.AG
    >C:0a08 GA.AAA.AA.A..AA.A..AAAAAPP.PAAPA.A.PAA.G
    >C:0a30 GAA.TAAPAPAAAA.A..AAAAAAP..PAAPA.A..AAAG
    >C:0a58 GAPA..AAPA..AAA.APAPA.AAA..PAA.AAAA.AAAG
    >C:0a80 GAAAA..APA..AAA.APAPA.APA.A.PAA.PAAAA.AG
    >C:0aa8 GA..AAAA.AAAA..AA.P.PAAPAAAA.AAAPAAA.APG
    >C:0ad0 GAAAAA.A..APPA.AAA..PAA.APAAA.PAAPAPAAAG
    >C:0af8 G.PAAAAAA.AAPA.APAAAA.A..AAPA..PAAAAAAAG
    >C:0b20 G.PAAAAAA.AA.PAAPAAAA.AAAPAAAAAAPAPPAAAG
    >C:0b48 GA.AAPA.AAA.AAPA..A::A..AAA.AAAAPAPPAAAG
    >C:0b70 GA.ATPHAAPAAAA.AAAPAAAAAAPAPHAAAAATPAAAG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5ae1 '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 G.A.PAA.A.AA.AAPA.AA%.AAPA..AAPA.PAAA.AG
    >C:08a0 GAPAPPAAAAAA.AAPAAAPAAAA.AAAPAAAAATPAPAG
    >C:08c8 D.PAAPAAA..AAAPAAPA.AAPAPAAABBBBBBBBBBBG
    >C:08f0 GAAAT.AAPA.HAAAAAPAAAAA.AAAAAAAAPP.PAAPG
    >C:0918 GBBBBBBBBBBBBAAPAPAAAA.A..AAAAAAP..PAAPG
    >C:0940 GA..AAA.AAPA..AAPA..AAAA.PPPAAAAA..PAA.G
    >C:0968 GAAA.PAAA.HAA.AAPA..AAAAAPAPPAAPA.A.PAAG
    >C:0990 GAAPA.AAPA.PAAAA.AAAAA.AAAP.PAAPAAAA.AAG
    >C:09b8 GAAAAAP.AAAAAA.A..HPPA.AAA..PAA.APAAAAPG
    >C:09e0 GPAPAAA.A.PAAAAAA.AAPAAAPAAAAPAAAATPA..G
    >C:0a08 GAAAAAAPA.PAAAAAAAAA.PAAPAAABBBBBBBBBBBG
    >C:0a30 GAPPAAAAAA.AAPA.AAA.AAPA..AAPA..AAA.PAAG
    >C:0a58 GBBBBBBBBBBBBPAAAAAAAA.AAAPAAAAAAPAPPAAG
    >C:0a80 GAAPAAA..AAATAAPA.AAPAPPAAAAAAAAAPAPPAAG
    >C:0aa8 GAA.AAPA.APAAACCCCCCCCAAAAAAAAA..PAAPAAG
    >C:0ad0 GPAA.PAAAAPAAP.PAAAT.AA.AAAAAAA..PAAPAAG
    >C:0af8 G.AAA.AAPA.AAAPA..AAAAAPPPPAAPA.A.PAA.PG
    >C:0b20 GA.PAAHAPAAAA.A..AAAAAAPP.PAAPAAA..AAAPG
    >C:0b48 GPA..AAPA..AAAAAPAPA.AAA..PAAPAAAA.AAAPG
    >C:0b70 GAAA..APAP.AAAAAPAPAAAAA...AA.APAAAAPAAG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5b24 '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GTTTPPTTPTTPAPPPPTPTTATTPTTPTTTTPPTPTPPG
    >C:08a0 GTPPTTTPPPTPTTPPPPPPTPPTATPTPPPPTPTTPPTG
    >C:08c8 GTTPPPPPPPTPTTPPAPPPTPPTTTPTPAPPTPPPTTPG
    >C:08f0 GPPTPTTPPPPPPTPPTTTAATTPPTPTTPPTPTTAPPTG
    >C:0918 GPPTPTTPPPPPPTPPTATPTPPPPTPTPTPPTTPPTPTG
    >C:0940 GTTTPPTPTATTPPTTPPTTTPPTPTPPPATPTTPPTPTG
    >C:0968 GPPPPPTPPTTTTAAPPPTPTTAPTPTTPAPPTTTTTTPG
    >C:0990 GTPTTBBBBBBBABBBBBTPPPPTPBBBBBBABBBBBBPG
    >C:09b8 GTATTB...........BPTTPPPTB...........BPG
    >C:09e0 GTPTPB.%D........BPTTPPPTB...........BPG
    >C:0a08 GTPPTB...........BPAPPTTPB...........BPG
    >C:0a30 GTPPTB...........BTTTTPTPB...........BTG
    >C:0a58 GPTTTB...........BTPPTATPB...........BTG
    >C:0a80 GPPPPB...........BTPPTTPPB...........BPG
    >C:0aa8 GTPTTB...........BAPTPPTPB...........BPG
    >C:0ad0 GTPTTB...........BBBBBBBBB...........BPG
    >C:0af8 GPPPTB...............................BPG
    >C:0b20 GPPPTB...........BTTAPTPTB...........BPG
    >C:0b48 GTTPPB...........BPPPTPTTB...........BPG
    >C:0b70 GTTAABBBBBBBBBBBBBTPPPTTTBBBBBBBBBBBBBTG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5b89 '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GAAAAAAAAAAAA%AAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:08a0 GBBBBBBBBBBBB.BBBBBBBBAAAAAAAAAAAAAAAAAG
    >C:08c8 GBAAAATAAAAAAAAAAAAATBAAAAAAAAAAAAAAAAAG
    >C:08f0 GBAB.BABBBBBB.BBBBBBABAAAAAAAAAAAAAAAAAG
    >C:0918 GBABHBABTAAAAAAAAATBABAAAAAAAAAAAAAAAAAG
    >C:0940 GBABHBABABBBB.BBBBABABAAAAAAAAAAAAAAAAAG
    >C:0968 GBABHBABABTAAAAATBABABAAAAAAAAAAAAAAAAAG
    >C:0990 GBABHBABABABB.BBABABABAAAAAAAAAAAAAAAAAG
    >C:09b8 GBABHB.B.B.B...B.B.B.BAAAAAAAAAAAAAAAAAG
    >C:09e0 GBABHBHBHBHBHHHBHBHBHBAAAAAAAAAAAAAAAAAG
    >C:0a08 GBABHB.B.B.B...B.B.B.BAAAAAAAAAAAAAAAAAG
    >C:0a30 GBABHBABABABBBBBABABABAAAAAAAAAAAAAAAAAG
    >C:0a58 GBABHBABABTAAAAATBABABAAAAAAAAAAAAAAAAAG
    >C:0a80 GBABTBABABBBBBBBBBABABAAAAAAAAAAAAAAAAAG
    >C:0aa8 GBABTBABTAAAAAAAAATBABAAAAAAAAAAAAAAAAAG
    >C:0ad0 GBABTBABBBBBBBBBBBBBABAAAAAAAAAAAAAAAAAG
    >C:0af8 GBABTBTAAAAAAAAAAAAATBAAAAAAAAAAAAAAAAAG
    >C:0b20 GBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAG
    >C:0b48 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0b70 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5bef '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GPAPTAPPPABAAATPPAAPBAAATAAAPABAAATPAPAG
    >C:08a0 GAAA.APAPABAAAP.PAAPBPAAAAPAAPBPAAAPAPPG
    >C:08c8 GAAAA.AAPPBAPAAAAPAABAAPA.PPAABAAAAPAPPG
    >C:08f0 GPAPAA.PPPBAPAAAA.AABPAAAAAAPABPAAAAAAPG
    >C:0918 GPA.AAAPAABA..AAPAPPBAAAAAAAPABPAAAAAA.G
    >C:0940 GPPAAPAAAABAAAPAAAAABPAPPAAAAABPAAP.PAAG
    >C:0968 GAAPAPPAAPBPPAAAPAAABPAPPAAAAABPAAPA.ABG
    >C:0990 GAAPAAAPAABAAAPAPAAPBPAAPA.APPBA.PAAHBPG
    >C:09b8 GPAPABBBBBBBBBHBBBBBBBBBPBBBBBBBBBAABA.G
    >C:09e0 GAPA..AAAAAPPPPAAPAPAPPAAPPAAA.PAAPBPAAG
    >C:0a08 GPAPPAAAAAAPPPPAAPA.A.PAAAPAAPAPPABPAPPG
    >C:0a30 GA.APAPA.BAAPPPAAPAAAA.AAAPAAAAAPBAPAPPG
    >C:0a58 GA.APAPA.BPABBBBBBBBBBBBBBBBBPPABAAPAAAG
    >C:0a80 GPAA.PPPABPAAAAPAAAPAAA.APPAAAABAPAPPAPG
    >C:0aa8 GPAAAPPPABPAPAAA.PAAPAPAAAPAPPBAAAAAPADG
    >C:0ad0 G.APAAAAPB..AAPAPPPAAAAAAAPAPBAAAAAA.AAG
    >C:0af8 GAAPAAAA.BAAPAAAAAAPAPPAAAAABPAAPAPAAAPG
    >C:0b20 GPAPPAAPABPAAAPAAAAP%PPAAAAAAPAAPHAAPAAG
    >C:0b48 GPAAAPAAABAAPAPHAAAAAAPAAA.PAA.PAAPTPAAG
    >C:0b70 GPPATA.AABAAPAPPAAAAAAPAAPA.PAHAPPAPAAAG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5c59 '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GPA.AAAPPAAAAAPAPAAPAAAAAAAAPAAAAAPAATAG
    >C:08a0 GAAAAATAPAAAAAAA.AAAAPAAAAPAAPAAAAA.AAPG
    >C:08c8 GAAAAAAAPTBAPABAA.BAAABPAAAPAAA.HAA.AA.G
    >C:08f0 GTBBBBBBBBBBBABAAABAAPBAAAAAPAA..AAAAAAG
    >C:0918 GPAAAAAAAABAAABAPAB.TABAAAAAPAAAAAAAAAAG
    >C:0940 GPPAAPAAAABAAABAAABAAPBPPAAAAAAPAATAAAAG
    >C:0968 GAAPAAAAAPBPPABAAABAAPBPPAAAAAAAAAPAAAPG
    >C:0990 GABBBBBBBBBBBABAPAB.APBAPAAAAPA.HAAATAPG
    >C:09b8 GPAPAAAAAABAAABAPABAAPBAPAATAAA..AAAPAAG
    >C:09e0 GAPAAAAAAABPP.BAATBAA.BAAAPAAAAAAATAPAAG
    >C:0a08 G.AAAAAAAABPP.BAAPBAAABAAA.AAPAAAAAPAAAG
    >C:0a30 GABBBBBBBBBBBBBBBPBAAABAAAPAAAAAAAAPA..G
    >C:0a58 GAAAPAPAAABAAABPAABPAABAPAAPAPA.HAAAAAAG
    >C:0a80 GAAAAP.PAABAAABAAABTAABAAP.AAAA..AAAAATG
    >C:0aa8 GAAAA.APAABATABAAPBAPABAAAPA.PAAAAAAAAAG
    >C:0ad0 GABBBBBBBBBBBABAAABAAABAAAPA.PAAAAAAAAAG
    >C:0af8 GAAPAAAAAABAPABAAABPAPBAAAAAA.AAPAAAAAAG
    >C:0b20 GPA%AAAPA.BAAABAAABPAPBAAAAAAAAAPTAAPAAG
    >C:0b48 GAAAAPAAAABAPABTAABAAABAAAA.AAAPAATA.AAG
    >C:0b70 GPPAAAAAAABAPABTAABAAABAAPAATATAPAAPAAAD
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5c97 '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GPAAAAAPPADAAAAAPA%P:AAAAAAAPAAAAAAAAPAG
    >C:08a0 GAAAAAPAPAAAAAAAAAAAAPAAAAPAAPAPAAAAAAAG
    >C:08c8 GAAAAAAAAPAAPAAAAAAAAAAAAAAPAAAAAAAAAAAG
    >C:08f0 GPAAAAAAAPAAAAAAAAAAAPAAAAAAPAAPAAAAAAAG
    >C:0918 GPAAAAAAAAPAAAAAPAAAPAAAAAAAPAAPAAAAAAAG
    >C:0940 GAPAAPAAAAAAAAPAAAAAAPAPPAAAAAAAAAPAAAAG
    >C:0968 GAAPAAAAAPAAAAAAAAAAAPAPPAAAAAAAAAPAAAPG
    >C:0990 GAAAAAAPAAAAAAPAPAAAAPAAPAAAAAAAAPAAPAAG
    >C:09b8 GPAPAAAAAAAAAAPAPAAAAAAAAAAPAAAAAAAAAAAG
    >C:09e0 GAAAAAAAAAAPPAPAAPAAAAPAAAPAAAAPAAPAPAAG
    >C:0a08 GAAAAAAAAAAPAAPAAPAAAAAAAAAAAPAAAAAPAAAG
    >C:0a30 GAAAPAPAAAAAAAPAAAAAAAAAAAPAAAAAAAAPAAAG
    >C:0a58 GAAAPAPAAAPAAAAPAAAPAAAAAAAPAAAAAAAAAAAG
    >C:0a80 GAAAAPAPAAPAAAAAAAAPAAAAAPAAAAAAAAAAAAPG
    >C:0aa8 GAAAAAAPAAAAPAAAAPAAPAPAAAAAAPAAAAAAAAAG
    >C:0ad0 GAAPABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAG
    >C:0af8 GAAPA000000000000000000000000000000AAAAG
    >C:0b20 GPAAAPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPAPAAG
    >C:0b48 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0b70 GAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAAAG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5cf1 '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GAA%AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:08a0 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:08c8 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:08f0 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0918 GAAAAAAAAAAAAAAAAAAAAAHAHAHAHAHAHAAAAAAG
    >C:0940 GAAAAAAAAAAAAAAAAAAAAAPAPAPAPAPAPAAAAAAG
    >C:0968 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0990 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:09b8 GAAAAAAAAAA0A.A.A.A.A.AAAAAAAAAAAAAAAAAG
    >C:09e0 GAAAAAAAAAA.A.A.A.A.A.AAAAAAAAAAAAAAAAAG
    >C:0a08 GAAAAAAAAAA.A0A.A.A.A.AAAAAAAAAAAAAAAAAG
    >C:0a30 GAAAAAAAAAA.A.A.A.A.A.AAAAAAAAAAAAAAAAAG
    >C:0a58 GAAAAAAAAAA.A.A0A.A.A.AAAAAAAAAAAAAAAAAG
    >C:0a80 GAAAAAAAAAA.A.A.A.A.A.AAAAAAAAAAAAAAAAAG
    >C:0aa8 GAAAAAAAAAA.A.A.A0A.A.AAAAAAAAAAAAAAAAAG
    >C:0ad0 GAAAAAAAAAA.A.A.A.A.A.AAAAAAAAAAAAAAAAAG
    >C:0af8 GAAAAAAAAAA.A.A.A.A0A.AAAAAAAAAAAAAAAAAG
    >C:0b20 GAAAAAAAAAA.A.A.A.A.A.AAAAAAAAAAAAAAAAAD
    >C:0b48 GAAAAAAAAAA.A.A.A.A.A0AAAAAAAAAAAAAAAAAG
    >C:0b70 GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5d2c '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GPAPPAA..PAAPAAPAPAA%PAAPAPPAAPAPPAAAPAG
    >C:08a0 GABAPPAAAAAAPAAPAAAPAAAABAAAPAAAAAAPAPAG
    >C:08c8 GPPBAPAAA.PAA.PAAPAPAAPBPAAAA.AA.AAPAPHG
    >C:08f0 GAAABPAAPA.HAAAAAPA.AABPA..AAAAAPPPPAAPG
    >C:0918 GAPPABPPAAA.PAAPAPAAABPA.PAAAAAAPPPPAAPG
    >C:0940 GA.PAABPAAPAP.AAPAPPBAAA.PPPA.AAAPPPAAPG
    >C:0968 GAAAPPABA.HAAPAAPAPBAAAAAPAPPAAPAPAPPAAG
    >C:0990 GAAPAPAABAPPAAAA.ABAAAPAA.PPPAAPAAAAPAAG
    >C:09b8 GAAA.APPABAAAAPA.BHPPA.AAAPPPAAPAPAAA.PG
    >C:09e0 GPAPAAAPAPBAAAAABPAAPA.APAAAAPA..AAPAPPG
    >C:0a08 GAAAAAAPAPPBAAABA.AAPPAAPAAAA.AAAPAAAAAG
    >C:0a30 GAPPAAAAAAPAAAAPAAAPAAPAP.AAPAPPAAA.PAAG
    >C:0a58 GAPPAAAAAAPACCCAAPAAAAPAAAPAAAAAAPAPPAAG
    >C:0a80 GAAPAAA.PAAAPAAPAPAAPAPPAAA.AAAAAPAPPAAG
    >C:0aa8 GAAPAAPA.APAAAAPAAAAAPA..AAAAAAPPPAAPA.G
    >C:0ad0 GPAA.PAAAAPAAPAPAAAAPA..AAAAAAAPPPAAPAAG
    >C:0af8 GPAAAPAAPA..AAPA..AAAA.PPPPAAPAPAPPAAPPG
    >C:0b20 GA.PAAH.PAAAAPAPPAAAAAAPPPPAAPA.APPAA.PG
    >C:0b48 GPAPPAAPAPPAAA.APAPA.AAAPPPAAPAAAA.AAAPG
    >C:0b70 GAAAPPAPAPPAAA.APAPADAAAP.PAAPAPAAAAPAAG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5d8b '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 G%AAPAAAAAAAAAAPAAAAAAAAPAAAAAPAAPAAAAAG
    >C:08a0 GAPAPPAAAAAAAAAPAAAPAAAAAAAAPAAAAAAPAPAD
    >C:08c8 GAPAAPAAAAAAAAPAAPAAAAPAPAAAAAAAAAAPAPPG
    >C:08f0 GAAAAAAAPAAPAAAAAPAAAAAAAAAAAAAAPPAPAAPG
    >C:0918 GAAPAAAPAAAAPAAPAPAAAAAAAAAAAAAAPAAPAAPG
    >C:0940 GAAAAAAAAAPAAAAAPAAAAAAAAPPPAAAAAAAPAAAG
    >C:0968 GAAAAPAAAAPAAAAAPAAAAAAAAPAPPAAPAAAAPAAG
    >C:0990 GAAPAAACCCCCCAACCCCCCAAAAAPAPAAPAAAAAAAG
    >C:09b8 GAAAAAPBAAAABAABAAPPBAAAAAAAPAAAAPAAAAPG
    >C:09e0 GPAPAAABAAPABAABAAAABAAAPAAAAPAAAAAPAAAG
    >C:0a08 GAAAAAABAAPABAABAAAABPAAPAAAAAAAAPAAAAAG
    >C:0a30 GAPPAAABAAAABPABAAAABAPAAAAAPAAAAAAAPAAG
    >C:0a58 GAPPAAABAAAABPPBAPAABAAAAAPAAAAAAPAPPAAG
    >C:0a80 GAAPAAABAAAABAABAAAABAPPAAAAAAAAAPAPPAAG
    >C:0aa8 GAAAAAPBBBBBBAABBBBBBAAAAAAAAAAAAPAAPAAG
    >C:0ad0 GPAAAPAAAAPAAPAPAAAAAAAAAAAAAAAAAPAAPAAG
    >C:0af8 GAAAAAAAAAAAAAPAAAAAAAAPAAAAAPAAAAAAAAPG
    >C:0b20 GAAPAAPAA.HAAAAAA.HAAAAPA.HAAPAAA.HAAAPG
    >C:0b48 GPAAAAAPA..AAAAAA..AAAAAA..AAPAAA..AAAPG
    >C:0b70 GAAAAAAPAAAAAAAAAAAAAAAAAAAAAAAPAAAAPAAG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5dc7 '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 G..................GGGGGGGGGGGGGGGGGGGGG
    >C:08a0 G.........P........GGGGGGGGGGGGGGGGGGGGG
    >C:08c8 G..%......A........GGGGGGGGGGGGGGGGGGGGG
    >C:08f0 G..................GGGGGGGGGGGGGGGGGGGGG
    >C:0918 G..................GGGGGGGGGGGGGGGGGGGGG
    >C:0940 G..................GGGGGGGGGGGGGGGGGGGGG
    >C:0968 G..................GGGGGGGGGGGGGGGGGGGGG
    >C:0990 G..................GGGGGGGGGGGGGGGGGGGGG
    >C:09b8 G..................GGGGGGGGGGGGGGGGGGGGG
    >C:09e0 G.........2.......DGGGGGGGGGGGGGGGGGGGGG
    >C:0a08 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0a30 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0a58 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0a80 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0aa8 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0ad0 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0af8 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b20 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b48 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b70 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5e1d '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GPHAAAAAAAAAAAAAAAPGGGGGGGGGGGGGGGGGGGGG
    >C:08a0 G%PHAAAAAAAAAAAAAPDGGGGGGGGGGGGGGGGGGGGG
    >C:08c8 GTAPHAAAAAAAAAAAPATGGGGGGGGGGGGGGGGGGGGG
    >C:08f0 GPTAPHAAAAAAAAAPATPGGGGGGGGGGGGGGGGGGGGG
    >C:0918 GAPTAPHAAAAAAAPATPAGGGGGGGGGGGGGGGGGGGGG
    >C:0940 GAAPTAPHAAAAAPATPAAGGGGGGGGGGGGGGGGGGGGG
    >C:0968 GAAAPTAPHAAAPATPAAAGGGGGGGGGGGGGGGGGGGGG
    >C:0990 GAAAAPTAPHAPATPAAAAGGGGGGGGGGGGGGGGGGGGG
    >C:09b8 GAAAAAPTAPPATPAAAAAGGGGGGGGGGGGGGGGGGGGG
    >C:09e0 GAAAAAAPTAATPAAAAAAGGGGGGGGGGGGGGGGGGGGG
    >C:0a08 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0a30 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0a58 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0a80 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0aa8 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0ad0 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0af8 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b20 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b48 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b70 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5e5b '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 G.......%..........GGGGGGGGGGGGGGGGGGGGG
    >C:08a0 G..................GGGGGGGGGGGGGGGGGGGGG
    >C:08c8 G..................GGGGGGGGGGGGGGGGGGGGG
    >C:08f0 G..................GGGGGGGGGGGGGGGGGGGGG
    >C:0918 G.................DGGGGGGGGGGGGGGGGGGGGG
    >C:0940 G..................GGGGGGGGGGGGGGGGGGGGG
    >C:0968 G..............HHHHGGGGGGGGGGGGGGGGGGGGG
    >C:0990 G..............HHHHGGGGGGGGGGGGGGGGGGGGG
    >C:09b8 G..............HHHHGGGGGGGGGGGGGGGGGGGGG
    >C:09e0 GTTTTTTTTTTTTTTHHHHGGGGGGGGGGGGGGGGGGGGG
    >C:0a08 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0a30 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0a58 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0a80 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0aa8 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0ad0 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0af8 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b20 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b48 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b70 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5ea8 '''
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GAA%AAAAAAAPPPAAAAAGGGGGGGGGGGGGGGGGGGGG
    >C:08a0 GAAAAAAAAAAPPPAAAAAGGGGGGGGGGGGGGGGGGGGG
    >C:08c8 GAAAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGGGGGGG
    >C:08f0 GAAAAAAAAAACCCAAAAAGGGGGGGGGGGGGGGGGGGGG
    >C:0918 GAAAAAAAPAA...AAAAAGGGGGGGGGGGGGGGGGGGGG
    >C:0940 GAAAAAAAAPA...AAAAAGGGGGGGGGGGGGGGGGGGGG
    >C:0968 GAAAAAAAAAP...AAAAAGGGGGGGGGGGGGGGGGGGGG
    >C:0990 GAAAAAAAADACCCAAAAAGGGGGGGGGGGGGGGGGGGGG
    >C:09b8 GAAAAAAAAAA...AAAAAGGGGGGGGGGGGGGGGGGGGG
    >C:09e0 GAAAAAAAAAA...AAAAAGGGGGGGGGGGGGGGGGGGGG
    >C:0a08 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0a30 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0a58 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0a80 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0aa8 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0ad0 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0af8 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b20 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b48 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b70 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$5ee8 ""
$5f28 ""
$5f28 '''
    Cells contain values that represent a game object in a specific
    state, like a falling/stationary boulder for example. A falling and
    a stationary boulder still look like a boulder. This table translates
    a cell's value to the base character for that object.
'''
$5f68 ""
$5f68 v'''
    $00[.] - Space
    $01[A] - Dirt
    $02[B] - Brick wall
    $03[C] - Magic wall
    $04[D] - Hidden outbox
    $05[E] - Outbox
    $06[F] - Fragile steel wall
    $07[G] - Steel wall
    $08[H] - Firefly (left)
    $09[I] - Firefly (up)
    $0a[J] - Firefly (right)
    $0b[K] - Firefly (down)
    $0c[L] - *Firefly (left)
    $0d[M] - *Firefly (up)
    $0e[N] - *Firefly (right)
    $0f[O] - *Firefly (down)
    $10[P] - Boulder (stationary)
    $11[Q] - *Boulder (stationary)
    $12[R] - Boulder (falling)
    $13[S] - *Boulder (falling)
    $14[T] - Diamond (stationary)
    $15[U] - *Diamond (stationary)
    $16[V] - Diamond (falling)
    $17[W] - *Diamond (falling)
    $1b[[] - Explosion to space (stage 0) (to be scanned explosions start here)
    $1c[\] - Explosion to space (stage 1) (scanned explosions start here)
    $1d[]] - Explosion to space (stage 2)
    $1e[^] - Explosion to space (stage 3)
    $1f[_] - Explosion to space (stage 4)
    $20[ ] - Explosion to diamond (stage 0) (to be scanned explosions start here)
    $21[!] - Explosion to diamond (stage 1) (scanned explosions start here)
    $22["] - Explosion to diamond (stage 2)
    $23[#] - Explosion to diamond (stage 3)
    $24[$] - Explosion to diamond (stage 4)
    $25[%] - Inbox (Rockford's initial position)
    $26[&] - Pre-Rockford (stage 1)
    $27['] - Pre-Rockford (stage 2)
    $28[(] - Pre-Rockford (stage 3)
    $30[0] - Butterfly (down)
    $31[1] - Butterfly (left)
    $32[2] - Butterfly (up)
    $33[3] - Butterfly (right)
    $34[4] - *Butterfly (down)
    $35[5] - *Butterfly (left)
    $36[6] - *Butterfly (up)
    $37[7] - *Butterfly (right)
    $38[8] - Rockford
    $39[9] - *Rockford
    $3a[:] - Amoeba
    $3b[;] - *Amoeba
    * = SCANNED
    [x] = 'x' is char shown with VICE monitor's 'i' command
'''
$5fe8 v'''
    MusicData ($5fe8-$60e7) is copied to CopiedMusicData ($3000-$30ff).
    MusicData and GameCharData (below) are copied together to $3000 by InitAll.
    The music data occupies exactly 256 bytes, and the charset 768 (1k in total).
    '''
$60e8 v'''
    GameCharData ($60e8-$63e7) copied to GameTiles ($3100-$33ff).
    As mentioned above InitAll copies MusicData and GameCharData to $3000.
    $3000 is used as the in-game character set (not counting the marquee) and is
    accessed by the VIC. Since the music data is 256 bytes, and 256/8 is 32, the
    first character is $20. Any character less than that will interpret music
    data as graphics.
'''
$66e8 v'''
    m-i-c-r-o-..f-u-n-.*-.m-i-c-r-o-..f-u-n-
    ............p-r-e-s-e-n-t-s-............
'''
$6738 v'''
    >C:6738 CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
    >C:6760 C......................................C
    >C:6788 C.HCCCI................................C
    >C:67b0 C.HC..H.HCCC.HC.H.HC...HCCI.HCCC.HCCI..C
    >C:67d8 C.HCCCJ.HC.H.HC.H.HC...HC.H.HC...HC.H..C
    >C:6800 C.HCCCI.HC.H.HC.H.HC...HC.H.HCC..HCCJ..C
    >C:6828 C.HC..H.HC.H.HC.H.HC...HC.H.HC...HCCI..C
    >C:6850 C.HCCCJ.HCCC.HCCC.HCCC.HCCJ.HCCC.HC.H..C
    >C:6878 C......................................C
    >C:68a0 C......HCCCI...........................C
    >C:68c8 C......HC..H..HCI.HCCC.HC..H.]^_.......C
    >C:68f0 C......HC..H.HC.H.HC...HC..H...........C
    >C:6918 C......HC..H.HCCC.HCCC.HCCCC...........C
    >C:6940 C......HC..H.HC.H...HC.HC..H...........C
    >C:6968 C......HCCCJ.HC.H.HCCC.HC..H...........C
    >C:6990 C......................................C
    >C:69b8 CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
'''
$69e8 v'''
    .......l-i-c-e-n-s-e-d-..f-r-o-m-.......
    .......c-r-a-c-k-e-d-..b-y-..n-o-v-a-...
    ..............c-..1-9-8-4-..............
    .f-i-r-s-t-..s-t-a-r-..s-o-f-t-w-a-r-e-.
    m-i-c-r-o-..f-u-n-.*-.m-i-c-r-o-..f-u-n-
    ........................................
'''

$6ad0 ""
$6ad0 '''
    Generate a "random" number based on CIA timers (and the state of the C flag).
    The operation is pretty self explanatory. About the only point of interest is
    the addition without regard to state of the carry flag. 
'''
$6ad9 >"The C flag has a say in things! A bit of extra entropy is sometimes a good thing."

$6ae3 ""
$6ae3 '''
    A: Colour to set
    Y: Start offset.
    The portion of the first line not covered by Y is set to MCM white (brown non-MCM).
'''
$6ae4 "Make first line MCM white (brown non-MCM)."
$6b04 ""
$6b04 '''
    Saves the top line. Nothing exciting except for the fact that only
    the first character of each pair (most glyphs are two characters wide)
    is saved to save space.
'''
$6b16 ""
$6b16 '''
    Set the text for the top line. Sniffs the buffer and
    colours the text using various dopy heuristics.
    IN: LocalVar ($46 & $47) points to the text.
'''
$6b16 >"1 = White"
$6b1c >"$3c is left half of diamond character."
$6b20 >"7 = Yellow"
$6b5d ""
$6b69 ""
$6b69 "NOTE: multiple entry points!"
$6b7c ""
$6b7c v"..by.peter.liepa...."
$6b90 v"..with.chris.grey..."
$6ba4 v"1.player..1.joystick"
$6bb8 v".plyr.1......plyr.2."
$6bcc v".000000.last.000000."
$6be0 v".000000.high.000000."
$6bf4 v".g.a.m.e...o.v.e.r.."
$6c08 v"player.1?.3.men.a?0."
$6c1c v"....out.of.time....."
$6c30 v".b.o.n.u.s..l.i.f.e."
$6c44 v".cave?.a..level?.1.."
$6c58 v".spacebar.to.resume."
$6c6c v"press.button.to.play"
$6c80 ""
$6c80 '''
    ---------------------------------------------------------------
    INPUTS:
    ObjectTypeForScreenUpdate       $8A         = Object code
    InflatedCaveOutputOutputPtr    $36 & $37   = Position
    
    NOTES:
     Call SetInflatedCaveOutputPtr to set InflatedCaveOutputPtr
     Inflated Cave: $4003 - $4dc2
    ---------------------------------------------------------------
'''
$6c9b ""
$6c9b '''
    ---------------------------------------------
    INPUTS:
    .InflatedCaveCurrentCellPtr $34 & 35
    y = Offset
    OUTPUT:
    .InflatedCaveOutputPtr $36 & $37
    
    Inflated Cave: $4003 - $4dc2
    ---------------------------------------------
'''
$6cb6 ""
$6cb6 '''
    Set a cell in the cave (where the game logic occurs) and the inflated cave
    (staging area for screen, each cell is presented as 2x2 characters).

    A contains the object type and Y the offset from the current position.
    A is preseCaverved.
'''
$6cb8 >"the cave"
$6cd1 >"the inflated cave"
$6cd7 ""
$6ced ""
$6ced v'''
    .RandSeed1
    ...........\/............
    |b7|b6|b5|b4|b3|b2|b1|b0|
    ...........\/............     C
    |b0| 0| 0| 0| 0| 0| 0| 0|--->|b1|
    ...........\/............
    .SeededRandTemp1
'''
$6cf6 ""
$6cf6 v'''
    .RandSeed2
    ...........\/............
    |b7|b6|b5|b4|b3|b2|b1|b0|
    ...........\/............     C
    |0 |b7|b6|b5|b4|b3|b2|b1|--->|b0|
    ...........\/............
    .SeededRandTemp2
'''
$6cfe '''
    .\/RandSeed2
    ...........\/............
    |b7|b6|b5|b4|b3|b2|b1|b0|
    ...........\/............     C
    |b0| 0| 0| 0| 0| 0| 0| 0|--->|b1|
    ...........\/............
    ....+(RandSeed2+0x13)....
    .\/RandSeed2
'''
$6d0b ""
$6d16 ""
$6d16 "Update one cave cell and on screen provided it isn't steel wall."
$6d18 "Object $07 = steel wall."
$6d54 "Handler for object $04."
$6d5a "Object $05 = flashing outbox."
$6d22 '''
    Specify object type for fill in ObjectTypeForUpdateCaveCell (v).
    If the starred cell is the current cell the update occurs as shown:
    -------------
    |   |   |   |
    |---+---+---|
    | v |*v*|v-1|
    |---+---+---|
    |v-1|v-1|v-1|
    |---+---+---|
    |v-1|v-1|v-1|
    -------------
'''
$6d2c '''
    The decrement backs off the fill type for squares yet to
    be processed -- eg. back from explosion stage 1 to stage 0.
'''
$6d62 '''
    Specify object type for fill in ObjectTypeForUpdateCaveCell (v).
    If the starred cell is the current cell the update occurs as shown:
    -------------
    | v | v | v |
    |---+---+---|
    | v |*v*|v-1|
    |---+---+---|
    |v-1|v-1|v-1|
    -------------
'''
$6d7b '''
    The decrement backs off the fill type for squares yet to
    be processed -- eg. back from explosion stage 1 to stage 0.
'''
$6d91 "This is used by both Set3x3 functions."
$6da5 "All values for one SID voice."
$6dac "Matrix offset values used for firefly and butterfly turns."
$6db4 '''
    X is zeroed when the test succeeds. Note that this function tests
    for both scanned and unscanned Rockfords, but only pre-existing amoeba.
'''
$6db6 "Object $38 = Rockford."
$6dba "Object $3b = Amoeba created this frame."
$6dc1 "Sets the Z flag when an explosion should occur."
$6dda ""
$6ddf "Install an explosion to space."
$6de9 "Get the direction the firefly is facing: 0=left, 1=up, 2=right, 3=down."
$6df0 "Check if there is a space to the firefly's left."
$6df7 "Turn left and move."
$6e05 "Check if there is a space straight ahead."
$6e0c "Move straight ahead."
$6e19 "Turn right, but do not move."
$6e28 ""
$6e4f "All values for one SID voice."
$6e56 ""
$6e65 '''
    Tests if an object is slippery.
    In:
    A: The object code to test.
    Out:
    Z: 1 if slippery.
    Modified:
    X
'''
$6e7c ""
$6e7e "Test for hitting a butterfly."
$6e8c "Remember to explode to diamonds."
$6e98 "Test for hitting a firefly."
$6ea6 "Remember to explode to space."
$6ead ""
$6eb2 "Install an explosion to diamonds."
$6ebc "Get the direction the butterfly is facing: 0=down, 1=left, 2=up, 3=right."
$6ec3 "Check if there is a space to the right."
$6eca "Turn right and move."
$6ed8 "Check if there is a space straight ahead."
$6edf "Move straight ahead."
$6eec "Turn left, but do not move."
$6efb ""
$6f05 ""
$6f07 "Check for a space below."
$6f0b "Move the falling diamond down one row, and mark as scanned."
$6f13 "Check for a magic wall below."
$6f17 "Has the magic wall already been activated?"
$6f1b "Activate the magic wall."
$6f1f "Is the magic wall still active? If not the diamond will just be consumed."
$6f23 "Is the row below the magic wall empty? If not the diamond will just be consumed."
$6f29 "Convert the diamond to a (scanned) falling boulder below the magic wall."
$6f34 "Tinkle while the diamond falls."
$6f37 "Check if the diamond has hit a slippery object."
$6f40 "Is there a space below-left?"
$6f46 "Is there a space left?"
$6f4c "Move the diamond left."
$6f54 "Is there a space below-right?"
$6f5a "Is there a space right?"
$6f60 "Move the diamond right."
$6f68 "The diamond is on a slippery object, but can't fall left or right."
$6f6b "Have we hit Rockford on the head?"
$6f6f "Poor old Rockford is dead -- explode him to space."
$6f79 "Have we hit an animal?"
$6f7e "Explode the animal."
$6f84 "Can't do anything interesting, so convert to a stationary diamond."
$6f87 ""
$6f89 "Is there a space below the diamond?"
$6f8d "Convert to a scanned falling diamond and move down."
$6f98 "Is the diamond sitting on a slippery object?"
$6fa1 "Is there a space below-left?"
$6fa7 "Is there a space left?"
$6fad "Move the diamond left."
$6fb5 "Is there a space below-right?"
$6fbb "Is there a space right?"
$6fc1 "Move the diamond right."
$6fcc ""
$6fd0 ""
$6fda v"$11 = Scanned stationary boulder."
$6fe6 "$14 = Stationary diamond."
$7000 '''
    $00 = Space, $01 = Dirt, $02 = Brick wall.
    Amoeba can grow into space and dirt. It is confined by anything else.
'''
$7031 "$3b = Scanned amoeba."
$7039 ""
$705d "You get an extra life every 500 points."
$7080 ""
$7080 v '''
    $32, $2f:
        A frequency value of $2f32. On PAL machines this gives a
        frequency of 709.5212042331696 HZ
        Calculated using this formula (PAL): (reg*985250)/16777216
    $00, $00:
        Pulse width. N/A
    $81:
        Control register
        Noise waveform, ADSR cycle
    $19:
        Attack 8 ms, Decay 750 ms
    $01:
        Sustain volume of 0, Release 24 ms
'''
$708c ""
$70c5 ""
$70c5 v"Subtract one from time (it'a a zero-based string)."
$70dc ""
$70e0 ""
$7105 ""
$7111 ""
$712d ""
$713d "Update the diamond count in CurrentPlayerInfoText."
$7144 ""
$715e ""
$716a "Quota reached."
$716e "Set score increment to the value of diamonds above the quota."
$717a "Display diamonds where the diamond quota used to be displayed."
$7182 "Diamond quota FX."
$718a ""
$7191 ""
$71ab ""
$71bd ""
$7236 v'''
    8 4 2 1
    -------
    . . . * Up    - $e (14)
    . . * . Down  - $d (13)
    . * . . Left  - $b (11)
    * . . . Right - $7 (7)
    * . . * ur    - $6 (6)
    * . * . dr    - $5 (5)
    . * * . dl    - $9 (9)
    . * . * ul    - $a (10)
'''
$7244 '''
    Rockford stalls here. This is a weird effect which only happens in the
    x-direction when he's moving to the right, the x-component of the scroll
    is to the left and he's at a specific x-coordinate on the screen.
'''
$726f '''
    Rockford stalls here. This is a weird effect which only happens in the
    y-direction when he's moving down, the y-component of the scroll is up
    and he's at a specific y-coordinate on the screen.
'''
$7265 v"Right or any diagional that includes right."
$7284 v'''
    >=$8 && <$c (not $e or $d)
    Left or any diagional that includes left.
'''
$7294 ""
$72a6 "Branch always taken."
$72b7 "These two tables are processed in one sweep by '.ProcessExplosion'."
$72cb ""
$72d3 ""
$7311 v'''
    $2e is the base character of the first steel wall.
    There'a another at $4a.
'''
$7344 ""
$734e '''
    Render cell from lattice to Inflated cave.
    Is either cell $05[E] (outbox) or $25[%] (inbox),
    both of which map to (via .BaseCharNoForObjectTable)
    a hollow box.
'''
$7353 '''
    If it's the inbox do some extra processing to arrange
    Rockford's appearence.
'''
$7360 ""
$7366 "$13 = Scanned falling boulder"
$73b3 "$13 = Scanned falling boulder"
$73d1 "$17 = Scanned falling diamond"
$73dd "NOTE: When a diamond is consumed my a magic wall the current scan is aborted."
$7454 ""
$7460 ""
$7487 ""
$749b ""
$74b3 ""
$74bb ""
$74c3 '''
    These instructions produce the same result as:
    1. LDA .ScreenLeft
    2. LSR A
    3. EOR #$ff
    5. CLC
    6. ADC #$01
    7. CLC
    8. ADC .unsure_RockfordX
    Steps 1-2 : A = .ScreenLeft/2 (convert from chars to cells)
    Steps 3-6 : A = -A
    Steps 7-8 : A = A + .RockfordX
    So : A = .RockfordX - .ScreenLeft/2
'''
$74c5 ""
$74cd ""
$74d8 ""
$74dc v"Higher indices scroll up (Rockford moving down)."
$74e0 ""
$74ef v'''
    We only start a scroll if .AnotherFrameCounter is even.
    This is important to keep the scrolling logic in sync with the rest of the IRQ handler.
    (IRQ handler flips buffers on even frames and copies the visible section of the inflated
    cave the the back buffer on odd frames.)
    
    .FineScrollDirY: $40 up, $c0 down.
'''
$74fc "// THE C FLAG IS ALL-IMPORTANT HERE!"
$7512 '''
    It is important to realise that this is the $d011 setting for the NEXT frame.
    $d011 has already been set from .RastInt_vic_control1 earlier in the handler.
'''
$7518 '''
    "Why compare to 1?", you ask:
    ============================================================================================
    
    Let's assume we've just initiated a scroll.
    n is always even since scrolling only starts on even frames.
    
    Frame n+0 (this frame):
    -----------------------
    1) .RastInt_vic_control1 = .YScrollVicCtl1Table[1] ($15)
    This setting takes effect in the next frame.
    The previous setting was .YScrollVicCtl1Table[0] ($17), the resting state when not scrolling.
    
    2) We change .InflatedCaveSubsetPtrH & InflatedCaveSubsetPtrL.
    Since the Inflated Cave is copied to the back buffer on odd frames and it then has to be
    flipped to the front, which happens in even frames, this change will not be seen for a bit.
    This is why we do it at what seems like a strange fine scroll value (not an extreme).
    
    3). Our caller flips the buffers (since we're an even frame).
    
    Frame n+1:
    ----------
    The $d011 value set during in frame n+0 ($15) is now in effect.
    
    1) .RastInt_vic_control1 = .YScrollVicCtl1Table[2] ($13)
    
    2) Our caller copies the Inflated Cave to the back buffer.
    The back buffer now reflects the changes made in frame n+0 step 2.
    It is not visible yet however as it has to be flipped to the front.
    
    Frame n+2:
    ----------
    The $d011 value set during in frame n+1 ($13) is now in effect.
    We have looped! That means we need a coarse scroll.
    The sequence is 4, 5, 6, 7, 0, 1, 2, 3 because of bad line strangeness
    due to the screen splitting. Boulder Dash only uses 5, 7, 1, 3.
    
    1) .RastInt_vic_control1 = .YScrollVicCtl1Table[3] ($11)
    
    2) Our caller flips the buffers. The changes made in frame n+0 step 2 are now visible,
    just when we need them!
'''
$751e v"Stuff on screen moves up, Rockford moving down."
$7542 v'''
    Stuff on screen moves down, Rockford moving up.
    
    Things are slightly different when scrolling down (Rockford going up). We start scrolling on an
    even frame and under these conditions, as explained above. The fine scroll changes take one frame
    to reach the screen and the coarse scroll changes take two frames. The $d011 scroll settings to
    scroll up are 5, 7, 1 & 3, we rest on 7. Since the coarse scroll path is two frames we schedule a
    coarse scroll this frame but hold off scheduling a fine scroll till the next frame (which takes
    only one frame). This means it takes two frames to initiate an upward scroll whereas scrolling
    down takes one.
'''
$7559 ""
$75d5 ""
$75d7 v"We only stop the scroll if we've fine scrolled right up to the edge."
$75e3 v"Stop the Y-scroll."
$75ef v"Stop the Y-scroll."
$75f3 ""
$75f3 v"We only stop the scroll if we've fine scrolled right up to the edge."
$75ff v"Stop the X-scroll."
$7603 ""
$760b v"Stop the X-scroll."
$760f ""
$7610 ""
$7616 "Scroll down if Rockford is >=11 cells from top."
$7624 "Scroll up if Rockford is <5 cells from top."
$7633 "Scroll right if Rockford >=17 cells from left."
$7641 "Scroll left if Rockford <3 cells from left."
$76ad ""
$76c6 ""
$76cd '''
    IN: ZF, A
    
    .CaveCurrentCellPtr(???) points to the NW cell ($00).
    The current cell C is at an offset of $29. See table below:
    ---------------------
    |NW:$00|N:$01|NE:$02|
    |------+-----+------|
    | W:$28|C:$29| E:$2a|
    |------+-----+------|
    |SW:$50|S:$51|SE:$52|
    |======+=====+======|
    |   $78|  $79|   $7a|
    ---------------------
'''
$76db ""
$76ee "$a0(160) is two character lines (each cell is 2x2)."
$76f9 ""
$76f9 v'''
    Build a line address table for currently visible
    portion of empanded lattice.
'''
$7716 ""
$7718 v"Not used as CellX. Is a simple loop counter."
$771e '''
    .CoverLevel::__POINTLESS really is totally pointless. The game does
    both read and write it but it has no effect. We never actually get
    to $7736 and even if we did we'd simply fall through to
    .__CoverLevel__PointlessBranchTarget. I suspect that during development
    the plan was to first cover the level with scrolling steel walls for a bit
    and then start filling with spaces - a sort of fade in fade out effect -
    and the pointless code and variable are what's left.
'''
$772f "Take branch below if A>=$2b(43)"
$7731 "0<=A<=$2a(42)"
$773a v"$7c is scrolling steel wall."
$774d '''
    Pads the Inflated Cave ($4003 - $4DC2) with 1st steel wall char ($4a).
    Padded bytes: $4000-4002 (3 bytes) and $4dc3-4ec2 (256 bytes).
'''
$7760 "Uncover one random cell on each line, 69 times (no already uncovered checks)."
$7760 v"Loop 69 times."
$7764 ""
$7777 '''
    .CaveCurrentCellX <= $27(39)
    A = 39-.CaveCurrentCellX
'''
$777b '''
    .RandomlyUncoverScreen::OffsetToStartOfNextLine = 40-.CaveCurrentCellX
    
    Adjust .CaveCurrentCellPtr(Low&High) to point to .CaveCurrentCellX on the line.
'''
$7788 "Setting the cell to itself like this will make it appear."
$778f "Move to the start of the next line."
$779c ""
$77a9 ""
$77b2 "We add one before we use it, so the phase number outside are one less than in here."
$77c0 "1 = Attack phase"
$77d4 "Branch always taken."
$77d6 "3 = Release phase"
$77e0 "2 = Sustain phase"
$77f8 v"When can be disabled in any phase so reset it to the attack phase."
$77fe ""
$77fe v'''
    Randomly "uncover" screen.
    The game is mainly interrupt driven and the this function takes some
    time to complete. When it returns the screen will not be totally uncovered.
'''
$7801 "Uncover the entire screen."
$7826 "What is the purpose of the padding?"
$782a '''
    Handle animating Rockford.
    IN: X is source offset. Y is destination offset.
    X and Y are preserved.
'''
$783a "Right facing."
$7853 "Left facing."
$787b "Set blink flag. There's a 1 in 4 chance of this occuring."
$7886 "Toggle the foot tapping. There's a one in 16 chance of this."
$78da v"Diamonds"
$78f2 ""
$78fa "Amoeba"
$7912 ""
$7918 "Butterfly"
$7930 ""
$7936 "Firefly"
$794e ""
$7997 >"The target of this branch may as well be $79d2"
$79a4 >"Note that not all SFX use this enable flag"
$79b8 >"Keep on trying till we get a frequency in range"
$79c7 >"Branch always taken"
$7a86 ""
$7ac6 "A = 0 to 24 in multiples of 8."
$7af7 v'''
    Move to the next frame in animations.
    There are 8 frames in each animatiom and each
    character has 8 lines. So .AnimationFrameLineOffset
    is a multiple of 8 from 0 to 56.
'''
$7b07 v'''
    FWI: .MagicWallActiveState:
    0 inactive. 1 active. 2 finished (signal to restore chars & kill sfx).
    3 done and chars restored.
'''
$7b11 '''
    We get here when state is 1 OR 3. I think the OR is a mistake.
    The error has no ramifications unless .MagicWallActiveSeconds wraps.
'''
$7b58 '''
    Code moved to $9e00 and executed there. Is self-modifying!
    $7b58-$7d57 is moved to $9e00-$9fff. More code than needed is moved. 
    The routine occupies $7b58-$7c90.
'''
$7b60 "Patched byte corresponds to $7ba9."
$7b67 "Patched byte corresponds to $7baa."
$7b74 "Patched byte corresponds to $7bad."
$7b79 '''
    Patched byte corresponds to $7bac.
    
    Now clone the patch (with adjustment) for the next 13 entries.
'''
$7ba6 '''
    Now move the lower 14 lines of the subset to the lower 14 lines
    of the screen back-buffer.
'''
$7bff ""
$7c09 "Patched byte corresponds to $9ef4"
$7c0e "Patched byte corresponds to $9ef3"
$7c13 "Patched byte corresponds to $9ef0"
$7c18 '''
    Patched byte corresponds to $9ef1
    
    Now clone the patch (with adjustment) for the next 9 entries.
'''
$7c45 '''
    Now move the upper 10 lines of the subset to the upper 10 lines
    of the screen back-buffer ***NOT*** including the top line.
'''
$7c91 ""
$7c9d v"BufferedLevel_ProbabilityOfObject1 > AF"
$7cab ""
$7ccd ""
$7ce1 ".Sid_Voice1Ctrl"
$7ce5 ".Sid_Voice2Ctrl"
$7ce9 ".Sid_Voice3Ctrl"
$7cf3 '''
    .Sid_VoiceXCtrl
    7      Select Random Noise Waveform, 1 = On
    6      Select Pulse Waveform, 1 = On
    5      Select Sawtooth Waveform, 1 = On
    4      Select Triangle Waveform, 1 = On
    3      Test Bit: 1 = Disable Oscillator
    2      Ring Modulate Osc. X with Osc. X-1 Output, 1 = On
    1      Synchronize Osc. X with Osc. X-1 Frequency, 1 = On
    0      Gate Bit: 1 = Start Att/Dec/Sus, 0 = Start Release
'''
$7d02 '''
    .Sid_FilterModeAndVolume
    Select Filter Mode and Volume
    7      Cut-Off Voice 3 Output: 1 = Off, 0 = On
    6      Select Filter High-Pass Mode: 1 = On
    5      Select Filter Band-Pass Mode: 1 = On
    4      Select Filter Low-Pass Mode: 1 = On
    3-0    Select Output Volume: 0-15
'''
$7d19 ""
$7d2b "While paused we spin in this function until we're unpaused."
$7d2e ".spacebar.to.resume."
$7d6b ""
$7d71 "Pause game."
$7d89 "Suicide."
$7d9f "Back to title screen."
$7da3 '''
    Remember that this runs before the tick so 'ThisTick' refers to the previous one.
    
    In C++ the function looks like this:
    
    if (!AmeobaCouldGrowThisTick && AmoebaIsGrowing)
    {
       AmeobaCouldGrowLastTick = false;
    }
    
    AmoebaIsGrowing = AmeobaCouldGrowThisTick
    
    AmeobaCouldGrowThisTick = false;
    AmoebaCellCountPreviousTick = AmoebaCellCountThisTick;
    AmoebaCellCountThisTick = 0;
'''
$7db3 "Reset variables for next frame."
$7dc3 "After Rockford has been dead for 16 ticks pressing fire continues."
$7dd9 ""
$7e66 '''
    0: Next level
    1: Is bonus cave
'''
$7e8e ""
$7e98 ".NumTo3DigitZeroBasedString__Exit = .LevelSequenceAndBonusLevelStatusArray-1"
$7edc "$"
$7f06 "Set cave time limit."
$7f1e "Set cave diamond quota."
$7f31 "Set cave diamond diamond values."
$7f59 "Reset diamond count."
$7f67 ""
$7f7d v"If we've got two players using a single joystick give them a bit more time."
$7f87 v"Cave B gets a tad more time."
$7f91 '''
    Bonus caves have all animations enabled and the rest use .LevelActiveAnimations[].
    Why all the logic for enabling animations are not part of the level data is beyond me.
'''
$7f9e ""
$7f9e v".g.a.m.e...o.v.e.r.."
$7fad ""
$7fce ""
$7fd6 '''
    Set top line text to:
    ....out.of.time.....
'''
$7fe4 "Restore top line text."
$8006 ""
$8011 ".b.o.n.u.s..l.i.f.e."
$8022 "$094e = .CurrentPlayerInfoText"
$802e ""
$8038 '''
    Without this the timer never display 000.
    It sets the first character of the third digit to zero.
    Only the first character need be set because BackupTopLine
    only looks at the first and .SetTopLineText takes a string.
'''
$8059 "Shut down magic walls."
$806e '''
    For level 1:
    >C:0800 -A)}#w2F/C  &z5I.B TU -A)}#w2F/C  &z5I.B
    >C:0828             0D2F%y3G%y.B4H3G
    >C:0850 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    >C:0878 GAAAAAA.AATAP.AAAAAPAPAAAAAAA.AAAAPAAAAG
    >C:08a0 GAP%PAAAAAA.AAAAAAAAAPTAAPAAAA.AAAAA.AAG
    >C:08c8 GAAAAAAAAAA.AA.AAAAAPAPAAPAAAAAAAAPAAAAG
    >C:08f0 GPA..AAAAAAAAAPAAAAAAPAAPAAAAPAAAPAAAAAG
    >C:0918 GPAPPAAAAAAAAAPPAAPAAAAAAAAPAAAAAAPAP.AG
    >C:0940 GAAAPAAPAAAAAAAAPAAAAAPA.PAAAAAAAAPAPPAG
    >C:0968 GBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAPAAPAG
    >C:0990 GA.AAAPAATA.AAPAPAAAAAAAAAATAP.AAAAAAPAG
    >C:09b8 GAATAAAAAPAAAAA.AAAAAAAAP..PAATAAAAPAAAG
    >C:09e0 GAAAPAAPAPAAAAAAAAAAAAAAPPAPAAPAAAAAAAAG
    >C:0a08 GA.AAAAAPAAAAAAAAPP.AAAAAAAPAAPATAAAA.AG
    >C:0a30 GAPAA.AAPA..AAAAAPAPTAATAAAAPAAAPAATAPAG
    >C:0a58 GATPAAAAAAAAAAAAAAPPPAAPAAAAAAAATAAAAAPG
    >C:0a80 GAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBG
    >C:0aa8 G..AAAAAAAAA.AAATAAAAPAAAAAPAAAPAAAAAAAG
    >C:0ad0 GP.AAAAAAAAAPPAAPAAAAAAAAPAAAAAAPAP.AADG
    >C:0af8 GAPAAPAAAAAAAAPAAAAAPA..AAAATAAAPAPPAAAG
    >C:0b20 GAAAAPTAA.AAAAAAAAPAAAAAAPAPTAAAAAAPAAAG
    >C:0b48 GAAA.AA.APAAPAPPAAAAAAAAAPAPTAAAAAAPAAPG
    >C:0b70 GATAAAAPAAAAA.AAAAAAAAA.APAAPAAAAPAAAPAG
    >C:0b98 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
'''
$80b2 '''
    .ObjTypeDuringUnpack   : object
    .ObjParam1DuringUnpack : x
    .ObjParam2DuringUnpack : y
'''
$80bc ""
$80bc v'''
    $ffd8 = -40 --> N
    $ffd9 = -39 --> NE
    $0001 = +1  --> E
    $0029 = +41 --> SE
    $0028 = +40 --> S
    $0027 = +39 --> SW
    $ffff = -1  --> W
    $ffd7 = -41 --> NW
'''
$80cc '''
    A : direction : 0->N, 1->NE, 2->E, 3->SE, 4->S, 5->SW, 6->W, 7->NW
    .ExecuteLevelDrawCommands::LineLength: length
'''
$80f3 ""
$8100 '''
    .ObjTypeDuringUnpack   : object
    .ObjParam1DuringUnpack : x
    .ObjParam2DuringUnpack : y
    .ObjParam3DuringUnpack : width
    .ObjParam4DuringUnpack : height
'''
$8107 ""
$8107 v"In this function .ExecuteLevelDrawCommands::LineLength is the height of the rect."
$810b "Draw a horizontal line of .ObjTypeDuringUnpack, length .ObjParam3DuringUnpack."
$8117 "Next row."
$8127 ""
$8128 '''
    .ObjTypeDuringUnpack   : outer object
    .ObjParam1DuringUnpack : x
    .ObjParam2DuringUnpack : y
    .ObjParam3DuringUnpack : width
    .ObjParam4DuringUnpack : height
    .ObjParam5DuringUnpack : inner object
'''
$813f '''
    .ObjTypeDuringUnpack   : object
    .ObjParam1DuringUnpack : x
    .ObjParam2DuringUnpack : y
    .ObjParam3DuringUnpack : width
    .ObjParam4DuringUnpack : height
'''
$8142 "Draw top edge heading east, length is param3-1."
$814d "Draw right edge heading south, length is param4-1. This fills the remaining cell of the top edge."
$8158 "Draw bottom edge heading west, length is param3-1. This fills the remaining cell of the right edge."
$8163 "Draw left edge heading north, length is param4-1. This fills the remaining cell of the bottom edge."
$816f ""
$8180 ""
$8186 '''
    .BufferedLevel_Object
    ---------------------------------
    |$80|$40|$20|$10|$08|$04|$02|$01|
    ---------------------------------
    |Command|        Object         |
    ---------------------------------
    
    Commands:
    $00 : single object     : (param1:x, param2:y)
    $40 : line              : (param1:x, param2:y, param3:length, param4:direction)
    $80 : filled rectangle  : (param1:x, param2:y, param3:width,  param4:height, param5:inner object)
    $c0 : rectangle
'''
$81f0 ""
$820f ""
$8227 ""
$8227 v'''
    Top two lines and BD logo (copies too much):
    66e8-67e7 to 0800-08ff (From line 1 column 1 to line 7 column 16)
    67e8-68e7 to 0900-09ff (From line 7 column 17 to line 13 column 32)
    68e8-69e7 to 0a00-0aff (From line 13 column 33 to line 20 column 8)
    License text (starts too early):
    69d0-6acf to 0ee8-0fe7 (Tilemap @ $0c00: L19 C25 - L25 C40)
'''
$823b '''
    .......l-i-c-e-n-s-e-d-..f-r-o-m-.......
    .......c-r-a-c-k-e-d-..b-y-..n-o-v-a-...
    ..............c-..1-9-8-4-..............
    .f-i-r-s-t-..s-t-a-r-..s-o-f-t-w-a-r-e-.
    m-i-c-r-o-..f-u-n-.*-.m-i-c-r-o-..f-u-n-
'''
$8244 '''
    When we first start the game the license text is shown below the logo.
    Pressing F1 replaces this text with some credits on the upper three lines
    and the lower two with game information such as starting cave and level:
    
    ..by.peter.liepa....
    ..with.chris.grey...
    press.button.to.play
    1.player..1.joystick
    .cave:.a..level:.1..
    
    After a game has been played or the demo has completed the upper three
    lines are replaced with high and last scores for both players:
    
    .plyr.1......plyr.2.
    .001750.last.000000.
    .001750.high.000000.
    1.player..1.joystick
    .cave:.a..level:.1..
'''
$824e v"..by.peter.liepa...."
$8265 v"..with.chris.grey.."
$827c v"press.button.to.play"
$8296 v".plyr.1......plyr.2."
$82db v".cave?.a..level?.1.."
$82f2 v"1.player..1.joystick"
$8379 v'''
    >=4   : Amoeba
    bit 1 : Butterfly
    bit 0 : Firefly
'''
$838d ""
$8391 "line 23, column 1"
$8394 "line 23, column 21"
$8397 "line 24, column 15"
$839a "line 24, column 35"
$83a1 ""
$83ac ""
$83ba v"Set voice 1&2 to triangle wave."
$83c2 '''
    Voice 2:
    Attack 10
    Decay 8
'''
$83ca ""
$842e ""
$8472 '''
    .NumPlayersAndJoysticksState:
    1 -> 1 player(s), 1 joystick(s)
    2 -> 2 player(s), 1 joystick(s)
    3 -> 2 player(s), 2 joystick(s)
'''
$84a2 ""
$84a9 "Any joystick movement resets the music repeat count."
$84ae ""
$84c4 "If .Level is 3 (4 in game) set .Cave to 1 (A)."
$84ce ""
$84db ".Cave >= 5. Four caves back."
$84e6 v"If .Level >=3 (>=4 as shown in game) the you can't select any Cave but A."
$84ec ".Level < 3 (< 4 in game)"
$84f2 "Skip four caves."
$84fa "Write cave and level to screen."
$84f6 '''
    Skip writing to screen if we're in license mode.
    Interestingly the cave and level can still be adjusted.
'''
$8518 ""
$8522 ""
$8522 v"Make lines 1 and 24 yellow."
$8526 "Line 24, column 1"
$8529 "Line 1, column 1"
$852f "Is F1 pressed?"
$853c "Set lower 23 lines of colour RAM to MCM-white."
$854d "Line 24 column 1"
$8550 "Line 24 column 29"
$8556 "Fill in level and cave."
$855b "line 24, column 35"
$8568 "line 24, column 15"
$8570 '''
    The number of joysticks and players is handled in .HandleNumPlayersAndJoysticks.
    This is lucky as this code only fills in the first character of the number of players.
'''
$857d "line 23, column 1"
$8580 ""
$859b ""
$859b v"Reset scrolling background character."
$85a8 ""
$85b1 "When we get here a game has started (this includes demo mode)."
$85b7 "Retool raster interrupts for in-game mode."
$85c7 ""
$85db v'''
    $984e: player.1,.2.men.a/1.
    .................|
    Men left----->---/
'''
$85e2 v'''
    $984e: player.1,.2.men.a/1.
    .......................|
    Cave--------->---------/
'''
$85ea v'''
    $984e: player.1,.2.men.a/1.
    .........................|
    Level---------->---------/
'''
$85f2 "Set top line text to player into display."
$8601 "Start."
$8606 ""
$860b '''
    struct RastIntVicRegs
    {
    BYTE Vic_Control1[2]; // $d011
    BYTE Vic_Control2[2]; // $d016
    BYTE Vic_MemCtrl[2];  // $d018
    BYTE Vic_Raster[2];   // $d012
    };
    
    Vic_Control1 0x1b =
    ECM: off,
    Bitmap: off,
    Blank: off,
    25 rows,
    Y Position: 3
    
    Vic_Control2 0x18 =
    MCM: on,
    40 cols,
    X Pos: 0
    
    Vic_MemCtrl 0x38 =
    Charset 0x2000
    Tilemap 0x0c00
    
    Vic_MemCtrl 0x28 =
    Charset 0x2000
    Tilemap 0x0800
'''
$8613 '''
    struct RastIntVicRegs
    {
    BYTE Vic_Control1[2]; // $d011
    BYTE Vic_Control2[2]; // $d016
    BYTE Vic_MemCtrl[2];  // $d018
    BYTE Vic_Raster[2];   // $d012
    };
    
    Vic_Control1 0x10 =
    ECM: off,
    Bitmap: off,
    Blank: off,
    24 rows,
    Y Position: 0
    
    Vic_Control1 0x1b =
    ECM: off,
    Bitmap: off,
    Blank: off,
    25 rows,
    Y Position: 3
    
    Vic_Control2 0x10 =
    MCM: on,
    38 cols,
    X Pos: 0
    
    Vic_Control2 0x18 =
    MCM: on,
    40 cols,
    X Pos: 0
    
    Vic_MemCtrl 0x3c =
    Charset 0x3000
    Tilemap 0x0c00
    
    Vic_MemCtrl 0x38 =
    Charset 0x2000
    Tilemap 0x0c00
'''
$861b ""
$861f '''
    Tile map: $0800
    Charset : $2000
'''
$8624 "Setup VIC colour registers."
$862f ""
$8746 ""
$876e ""
$87c8 ""
$87cc ""
$87cc v"Voice 3: Triangle waveform, Gate bit off."
$87d1 ""
$87e7 "Voice 3: Triangle waveform, Gate bit ON."
$87ec ""
$87f4 "Voice 3: Triangle waveform, Gate bit off."
$87f9 ""
$87fa ""
$8774 v"$5c-$6a to $6b-$79"
$877f "NOTE: Branch above always taken."
$877f v"$5c-$6a to $7a-$88"
$87ae "NOTE: Branch above always taken."
$8788 v"Player switched if multiplayer game and other player has lives left."
$87b7 v'''
    Since we only switch to a player that has a non-zero life count a count
    of zero means all players are dead.
'''
$8822 ""
$8841 ""
$8845 "$7e64 = .LevelSequenceAndBonusLevelStatusArray-2"
$8859 ""
$8859 v"Set the score increment to zero."
$8864 '''
    .Level is one less than the actual level as displayed in the game.
    We add one to compensate for this discrepancy and store the result
    in the last digit of .ScoreIncrementDigits.
'''
$887b '''
    When you complete a cave you get .Level+1 (.Level is 0 for level 1)
    points for every second remaining.
'''
$8888 "Branch always taken!"
$888a ""
$8897 ""
$88ab '''
    Exiting a cave happens when the player is killed, when time runs out
    or when the level is completed.
'''
$88ca v".CurrentPlayer is updated via the call to .KillPlayer above."
$88d2 v".Lives is updated via the call to .KillPlayer above."
$88db "$25 is the letter 'e'."
$88e1 v"$21 is the letter 'a'."
$88e3 "Patch the play info buffer: 'man' for one life and 'men' for more."
$88e6 "Cave and level, .Cave is updated in call the .NextCave above."
$88fb ""
$8913 ""
$895e ""
$896c '''
    $20 is a space.
    Here's an example of contents during game: .12?10.00.147.000010
'''
$8974 "$3c is a diamond."
$897a ""
$897a v'''
    $0c00-$0c27 = 0x20
    Set the first line of the 1st in-game tilemap to spaces.
'''
$8984 ""
$89b9 '''
    MusicData $5fe8-$60e7 copied to $3000-$30ff
    GameCharData $60e8-$63e7 copied to $3100-$33ff
    That's a combined total of 1k
'''
$89d4 '''
    $3770-$3797 to $ff
    $3798-$37bf to $00
    Sprite data is at $3780-$37be
    Sets the first 8 lines to solid & and last 13 transparent.
    NOTE: Writes both before and after the sprite data.
'''
$89e3 "Set all sprite pointers in both tilemaps to $3780."
$89f5 '''
    Position the sprites.
    NOTE: Note sprite Y position is raster line minus 1.
'''
$8a15 ""
$8a27 "X=0"
$8a46 "X=1"
$8a4c '''
    Clumsily .InitGameState::DoOneTimeInit is not initialised by
    the game. BD relies on the fact that the C64's OS uses this
    as the current line length minus one and thus when the game
    starts it is never zero.
'''
$8a81 ""
$8aa1 '''
    Extended Color Text Mode : Off
    Bit Map Mode             : Off
    25 rows                  : On
'''
$8aa6 ""
$8ab3 "Main entry point."
$8ab3 v"Setup stack."
$8ab6 "Turn off all CIA interrupts."
$8abe ""
$8ade "Make NMI (RUN-STOP+RESTORE or cartridge) restart game."
$8aea '''
    I/O area visible at $D000-$DFFF
    RAM visible at $A000-$BFFF
    KERNAL ROM visible at $E000-$FFFF
'''
$8aee ""
$8af6 "Move 7b58-7d57 to 9e00-9fff."
$8b12 ""
$8b1a "Moves 20 bytes from .Pre_level_Marquee_Text to $984e ($6c08-$6c1b to $984e-$9861)."
$8b25 ""
$8b2f ""

// Symbols

$0002-$0031 __CoverLevel__LineAddressTable
$0032-$0033 CaveCurrentCellPtr
$0034-$0035 InflatedCaveCurrentCellPtr
$0036-$0037 InflatedCaveOutputPtr
$0038-$0039 ObjHandlerVector
$003a-$003b ExecuteLevelDrawCommands__OutPtr
$003c-$003d CurrentLevelDataPtr
$003e       RandSeed2
$003f       RandSeed1
$0040       OrgRandSeed2_UNUSED_
$0041       OrgRandSeed1_UNUSED_
$0042       AmeobaCouldGrowThisTick
$0043       AmoebaIsGrowing
$0044       RockfordX
$0045       RockfordY
$0046-$0047 LocalVar
$004a       PlayRevealLevelSoundAndRedefineChar__FirstLine
$004e-$0053 ScoreIncrementDigits
$0054-$0055 RastInt_vic_control1
$0056-$0057 RastInt_vic_control2
$0058-$0059 RastInt_vic_memory_control
$005a-$005b RastInt_vic_raster_pos
$005c       Lives
$005d       Cave
$005e       Level
$005f-$0064 ScoreDigits
$0065-$006a HighScoreChars
$006b       Player1_Lives
$006c       Player1_Level
$006d       Player1_Sublevel
$006e-$0073 Player1_ScoreDigits
$0074-$0079 Player1_HighScoreChars
$007a       Player2_Lives
$007b       Player2_Level
$007c       Player2_Sublevel
$007d-$0082 Player2_ScoreDigits
$0083-$0088 Player2_HighScoreChars
$0089       ObjectTypeForUpdateCaveCell
$008a       ObjectTypeForScreenUpdate
$008b       JoystickStatus
$008c       AmeobaCouldGrowLastTick
$008d       MagicWallActiveState
$008e       MagicWallActiveFrameCounter
$008f       MagicWallActiveSeconds
$0090       LevelCompleteFlag
$0091       CaveMatrixX
$0092       CaveMatrixY
$0093       FlashingEntryBoxFlag
$0094       EnableSomeSFXAndMarqueeUpdates
$0095       FlashingEntryBoxCountDown
$0096       RockfordDeadTicks
$0097       ExitCaveFlag
$0098       RockfordDir_0Right_1Left_is_sticky_
$0099       UnpackedCaveNumber
$009a       AmoebaGrowthProbabilityMask
$009b       SecondsDontPass
$009c       MatrixRowTransitionDelay
$009d       CurrentPlayer
$009e       NumPlayerMinusOne
$009f       EnteredOutboxFlag
$00a0       GameOverFlag
$00a1       UpdateHighScoreIfNeeded_NeedsUpdating
$00a2       IsDemoMode
$00a3       TitleScreenInLicenseMode
$00a4       NumJoysticksMinusOne
$00a5       WhiteFlashWhiteCount
$00a6       IsBonusLevelFlag
$00a7       RastIntIsInMarquee
$00a8       ExtraLifeFXCounter
$00a9       OldScore1000sDigit
$00aa       OldScore100sDigit
$00ab-$00ad TimeLeft
$00ae       SubSecondCounter
$00af       TimeCaveHasRan
$00b0-$00b1 DiamondCountDigits
$00b2-$00b3 DiamondQuotaDigits
$00b4-$00b6 ExtraDiamondValue
$00b9       FlashingEntryBoxState
$00ba       CoverLevel__POINTLESS__
$00bb       _LoopCounter
$00bc       RandomlyUncoverScreen__OffsetToStartOfNextLine
$00bd       PlayRevealLevelSoundAndRedefineCharFlag
$00be       __TapFootFlag
$00bf       __BlinkFlag
$00c0       AnimationFrameTimes8
$00c1       TitleScreenFrameCountMod4
$00c2       AnotherFrameCounter
$00c3-$00c5 NumTo3DigitDigits__Result
$00c6       NumTo3DigitDigits__NumberToConvert
$00c7       CaveTimeLimit
$00c8       ExecuteLevelDrawCommands__LineLength
$00c9-$00ca CaveLineStepValue
$00cb       CaveUnpackOffset
$00cc       ForceCreditsMode
$00cd       StartGameTrigger
$00ce       RastInt_IntroScreenFlag
$00cf       RastInt_FurthestFromTitleIRQRaceCondition
$00d0       NumPlayersAndJoysticksState
$00d2       DemoMoveRepeatCount
$00d3       DemoMoveDataIndex
$00d4       ExitDemoModeFlag
$00d5       InitGameState__DoOneTimeInit
$00d6-$00d7 InflatedCaveSubset
$00d8       SFXTrigger_DiamondQuotaReachedOrEntryBoxExplode
$00d9       SFXTimer_DiamondQuotaReachedOrEntryBoxExplode
$00da       ObjTypeDuringUnpack
$00db       ObjParam1DuringUnpack
$00dc       ObjParam2DuringUnpack
$00dd       ObjParam3DuringUnpack
$00de       __UnknownZP_de
$00df       ObjParam4DuringUnpack
$00e0       ObjParam5DuringUnpack
$00e1       XScrollTableIndex
$00e2       XCoarseScrollDirFlag
$00e3       YScrollTableIndex
$00e4       YCoarseScrollDirFlag
$00e5       RockfordCellsFromTopOfScreen
$00e6       RockfordCellsFromLeftOfScreen
$00e7       FineScrollX
$00e8       ScreenLeft
$00e9       FineScrollDirX
$00ea       ScrollDirectionX
$00eb       FineScrollY
$00ec       ScreenTop
$00ed       FineScrollDirY
$00ee       ScrollDirectionY
$00fb       LastKeyInScanRow0_ScannedMoreThanOnce
$00fc       LastKeyInScanRow7_ScannedMoreThanOnce
$00fd       LastKeyInScanRow0
$00fe       LastKeyInScanRow7
$00ff       AnimationEnableFlags
$0800-$0be7 CaveMatrix_or_TitleLogoTileMap
$0c00-$0fe7 GameTileMap1_or_TitleTextTileMap
$2c00-$2fe7 GameTileMap2
$2400       BufferedLevel_CaveNumber
$2401       BufferedLevel_MagicWallMillingTimeOrAmoeba3PercentMax
$2402       BufferedLevel_InitialDiamondValue
$2403       BufferedLevel_ExtraDiamondValue
$2404       BufferedLevel_InitialRandomSeedForSublevel1
$2405       BufferedLevel_InitialRandomSeedForSublevel2
$2406       BufferedLevel_InitialRandomSeedForSublevel3
$2407       BufferedLevel_InitialRandomSeedForSublevel4
$2408       BufferedLevel_InitialRandomSeedForSublevel5
$2409       BufferedLevel_DiamondsNeededForSublevel1
$240a       BufferedLevel_DiamondsNeededForSublevel2
$240b       BufferedLevel_DiamondsNeededForSublevel3
$240c       BufferedLevel_DiamondsNeededForSublevel4
$240d       BufferedLevel_DiamondsNeededForSublevel5
$240e       BufferedLevel_CaveTimeForSublevel1
$240f       BufferedLevel_CaveTimeForSublevel2
$2410       BufferedLevel_CaveTimeForSublevel3
$2411       BufferedLevel_CaveTimeForSublevel4
$2412       BufferedLevel_CaveTimeForSublevel5
$2413       BufferedLevel_BackgroundColour1
$2414       BufferedLevel_BackgroundColour2
$2415       BufferedLevel_ForegroundColour
$2416       __unknown__
$2417       __unknown__2
$2418       BufferedLevel_RandomObjectNumber1
$2419       BufferedLevel_RandomObjectNumber2
$241a       BufferedLevel_RandomObjectNumber3
$241b       BufferedLevel_RandomObjectNumber4
$241c       BufferedLevel_ProbabilityOfObject1
$241d       BufferedLevel_ProbabilityOfObject2
$241e       BufferedLevel_ProbabilityOfObject3
$241f       BufferedLevel_ProbabilityOfObject4
$2420       BufferedLevel_Object
$2421       BufferedLevel_Param1
$2422       BufferedLevel_Param2
$2423       BufferedLevel_Param3
$2424       BufferedLevel_Param4
$2425       BufferedLevel_Param5
$3000-$30ff CopiedMusicData
$4003-$4dc2 InflatedCave
$4dc3       InflatedCave__END_PLUS_ONE__
$53b0-$53d9 InflatedCaveOffsetAdjustTable
$53da-$5405 InflatedCaveLineAddressTable
$5406-$5805 AnimatedCharData
$5806-$582d LevelOffsetArray
$5ee8-$5f27 ObjCodeFromScannedThisTickCodeTable
$5fe8-$60e7 MusicData
$60e8-$63e7 GameCharData
$63e8-$66e7 RockfordAnimationChars
$66e8-$69df Top2LinesAndBoulderDashLogo
$69e0-$69e7 Top2LinesAndBoulderDashLogo__Junk
$69e8-$6acf LicenseText
$6ad0   TimeBasedRandomNumber
$6ae3   SetupColourRam
$6ae8   _MarqueeLoop
$6aee   [<] C64_ColourRam
$6af2   [>] C64_ColourRam
$6af9   _BodyLoop
$6b04  BackupTopLine
$6b16  SetTopLineText
$6b5d   ReadJoystickDirectionPort1
$6b63   ReadJoystickDirectionPort2
$6b69   ReadFireButtonCurrentPlayer
$6b6b   ReadFireButtonPlayerInA
$6b74   ReadFireButtonPort1
$6b77   _StoreFireButtonBit
$6b7c     Text_ByPeterLiepa
$6b90     Text__WithChrisGrey
$6ba4     F1Text__Line4
$6bb8     Text_Plyr1Ply2
$6bcc     Text_LastScores
$6be0     Text_HighScores
$6bf4     Text_GameOver
$6c08     Pre_level_Marquee_Text
$6c1c     Text_OutOfTime
$6c30     Text_BonusLife
$6c44     F1Text__Line5
$6c6c     Text_PressButtonToPlay
$6c58     Text__SpaceBarToResume
$6c80  SetCellInInflatedCave
$6c9b  SetInflatedCaveOutputPtr
$6cb6  SetCell
$6cd7  __ProcessCave__ClearCurrentCell
$6d16  SetCellButPreserveSteelWall
$6d21   _Finished
$6d54  ProcessHiddenOutbox
$6d5f     ProcessHiddenOutbox__NotEnoughDiamonds
$6d22  Explode3x3CellsDownOneRow
$6d62  Explode3x3Cells
$6d91     Explode3x3Cells__Common
$6d9b     Explode3x3Cells__SoundLoop
$6dac     FromLeftClockwiseOffsetTable
$6db0     FromDownClockwiseOffsetTable
$6efb  __ProcessCave__CreateScannedStationaryDiamond
$6fcc     AmoebaUpLeftRightDownOffsetTable
$6fd0  ProcessAmoeba
$6fda     __ProcessAmoeba__GreaterOrEqualTo200
$6fe2     __ProcessAmoeba__NotTooBig
$6fee     __ProcessAmoeba__NotConfined
$6ff8     __ProcessAmoeba__ConfinementTestLoop
$7006     __ProcessAmoeba__CantGrowThisDirection
$7012     __ProcessAmoeba__AlreadyKnowAmoebaCanGrowThisTick
$7027     __ProcessAmoeba__NotSpace
$702d     __ProcessAmoeba__NotDirt
$7036     __ProcessAmoeba__DontGrowThisTick
$7039  ExtraLife
$7046     ProcessExtraLife
$705d  IncrementScore
$7080-$7086 DiamondQuotaReachedSoundSIDValues
$7087   InitiateDiamondQuotaReachedSound
$708c   CheckIfLevelTimeIsUp
$709d   TimeRunningOutFX
$70c5   GameSecondTick
$70e0   GameSecondTickWithAmoebaProcessing
$70f0     GameSecondTickWithAmoebaProcessing__Exit
$70f1  FlashingEntryBoxSecondTick
$70f5     FlashingEntryBoxSecondTick__Birth
$7104     FlashingEntryBoxSecondTick__Exit
$7105  SetTopLineToScore
$7111  SubSecondTick
$7119     SubSecondTick__OneGameSecondPassed
$7129     SubSecondTick__FlashingEntryBoxSecondTick
$712c     SubSecondTick_Exit
$712d     IncrementDiamondCount
$7144  DiamondQuotaDigitsToString
$7151  ScoreIncrementToString
$715e  CheckIfGotDiamondQuota
$7189     __CheckIfGotDiamondQuota__Exit
$7191  RockfordMovingToDiamond
$7196     RockfordMovingToDiamond__Loop
$7236  HandleJoystickForRockford
$723a     HandleJoystickForRockford__Down
$7251     HandleJoystickForRockford__NotDown
$7255     HandleJoystickForRockford__Up
$7261     HandleJoystickForRockford__NotUp
$7265     HandleJoystickForRockford__Right
$7280     HandleJoystickForRockford__NotRight
$7284     HandleJoystickForRockford__Left
$7293     HandleJoystickForRockford__Finished

$7294  ProcessRockford

$7298     __ProcessRockford__DemoMode
$729d     __ProcessRockford__NotDemoMode
$72ad     __ProcessRockford__Process
$72f0  ProcessRockfordsAppearance
$72fa     ProcessRockfordsAppearance__FindSequenceLoop
$7302     ProcessRockfordsAppearance__SequenceNotMatched
$730e     ProcessRockfordsAppearance__Exit
$7311  RenderSteelWallInInflatedCaveHelper
$7329  RenderSteelWallInInflatedCave
$7344  ProcessInAndOutBoxes
$734e     __ProcessInAndOutBoxes__Door
$735a     __ProcessInAndOutBoxes__Steel
$735d     __ProcessInAndOutBoxes__Exit
$7439  BlankLines0and4ofSpaceChars
$7454  ExtraLifeFX
$7460     __ExtraLifeFX__DoFX__
$7487  ScrollingBGTick
$749b-$74a6 YScrollTable
$74a7-$74b2 XScrollTable
$74b3  CalcScrollOffsets_XIfNeeded_YIfNeeded
$74bb  CalcXScrollOffsets_X_YIfNeeded
$74cd     CalcYScrollOffsets_Y
$74d8-$74db XScrollVicCtl2Table
$74dc-$74df YScrollVicCtl1Table
$74e0  ScheduleYScroll
$74ef     __ScheduleYScroll__StartScroll
$74f5     __ScheduleYScroll__ContinueScroll
$751e     __ScheduleYScroll__UpOneChar
$7542     __ScheduleYScroll__DownOneChar
$7559     ScheduleXScroll
$75d5  StopScrollingAtEdges
$75d7     __StopScrollingAtEdges__ClipYDir
$75df     __StopScrollingAtEdges__ScrolledFullyUp
$75e3     __StopScrollingAtEdges__DirUp
$75e7     __StopScrollingAtEdges__NotScrolledFullyDown
$75eb     __StopScrollingAtEdges__ScrolledFullyUp2
$75ef     __StopScrollingAtEdges__DirUp2
$75f3     __StopScrollingAtEdges__ClipXDir
$75fb     __StopScrollingAtEdges__ScrolledFullyRight
$75ff     __StopScrollingAtEdges__DirLeft
$7607     __StopScrollingAtEdges__ScrolledFullyLeft
$760b     __StopScrollingAtEdges__DirRight
$760f     __StopScrollingAtEdges__Exit
$7610  ChooseYScrollDirection
$7616     __ChooseYScrollDirection__Up
$7624     __ChooseYScrollDirection__Down
$762d  ChooseXScrollDirection
$7633     __ChooseXScrollDirection__Left
$7641     __ChooseXScrollDirection__Right
$764a  ChooseScrollDirection
$764e     __ChooseScrollDirection__YLoop
$7655     __ChooseScrollDirection__YMatch
$765f     __ChooseScrollDirection__YNoMatch
$7672     __ChooseScrollDirection__YNext
$76ad  Scroller
$76b6     __Scroller__DoScroll
$76c6     AdvanceCaveCurrentCellPtr
$76cd  ResetCaveCurrentCellPtr
$76db  FillInflatedCaveWithScrollingSteelWallChar
$76f9  CoverLevel
$771a     __CoverLevel__Outer
$771c     __CoverLevel__Inner
$7728     __CoverLevel__RandomNumber
$773a     __CoverLevel__PointlessBranchTarget
$774d     PadInflatedCave
$7760  RandomlyUncoverScreen
$776b     __RandomlyUncoverScreen__GetRandomNumber
$77a9  PlayRevealLevelSoundAndRedefineChar
$77ad  __PlayRevealLevelSoundAndRedefineChar__Enabled
$77c0     __PlayRevealLevelSoundAndRedefineChar__AttackPhase
$77d6     __PlayRevealLevelSoundAndRedefineChar__ReleasePhase
$77e0     __PlayRevealLevelSoundAndRedefineChar__RedefineChar
$77e7     __PlayRevealLevelSoundAndRedefineChar__Loop
$77f8     __PlayRevealLevelSoundAndRedefineChar__Disabled
$782a  AnimateRockford
$786c     AnimateRockford__Bored
$7870     AnimateRockford__FirstLine
$787f     AnimateRockford__DontBlink
$788c     AnimateRockford__RedfineBlinkingChars
$789f     AnimateRockford__ResetBlinkingChars
$78ab     AnimateRockford__RedfineFootTappingChars
$78bc     AnimateRockford__ResetFootTappingChars
$78c9  AnimateGameCharsAndHandleTopLineSwitch
$78da     AnimateGameCharsAndHandleTopLineSwitch__Loop
$7958  WhiteFlash
$7971  SoundFX
$797a   SoundFX_Paused
$797b   SoundFX_NotPaused
$797f   SoundFX_DiamondQuotaReachedOrEntryBoxExplode_Check
$7983   SoundFX_DiamondQuotaReachedOrEntryBoxExplode_Start
$7995   SoundFX_DiamondQuotaReachedOrEntryBoxExplode_InProgress
$7999   SoundFX_DiamondQuotaReachedOrEntryBoxExplode_Stop
$79a8   SoundFX_Amoeba_Check
$79ac   SoundFX_Amoeba_Tick
$79c9   SoundFX_MagiWall_Check
$7a86   RedefineMagicWallCharsToNormalWall
$7a9b   MagicWallFX
$7aa1   MagicWallFX__Sound
$7ac2   MagicWallFX__Animate
$7ac9   MagicWallFX__AnimateLoop
$7adf   HandleMagicWall
$7af7   Animate
$7b07   HandleMagicWallState
$7b2b  GameIRQActions
$7b30     __GameIRQActions__InBody
$7b4a     __GameIRQActions__FlipBuffers
$7b55     __GameIRQActions__CopyInflatedCaveToBackBuffer
$7b58  CopyInflatedCaveSubsetToBackBuffer
$7cab     FillWithDirtAndRandomObjects
$7cb2     FillWithDirtAndRandomObjects__NextRow
$7cb6     FillWithDirtAndRandomObjects__NextColumn
$7ccd-$7cd1 GameSpeedsForSublevelsArray
$7cd2     CaveRowTransitionDelay
$7cdf     ResetVoice1
$7ce3     ResetVoice2
$7ce7     ResetVoice3
$7cf4  ResetSound
$7d03  Delay
$7d0c  FourDelays
$7d19  DelaySpaceKeyAborts
$7d2b  PauseLoop
$7d6b  HandleInGameKeys
$7d71     __HandleInGameKeys__SpacePressed
$7d89     __HandleInGameKeys__RunStopPressed
$7d9f     __HandleInGameKeys_F1Pressed
$7da3  PreTickAmoebaProcessing
$7dc3  DeathClick
$7dd9  ProcessCave
$7de3     __ProcessCave__BonusCave
$7de7     __ProcessCave__NotBonusCave
$7dfc     __ProcessCave__NewRow
$7e00     __ProcessCave__ProcessCurrentCell
$7e0b     __ProcessCave__ObjectHandler
$7e15     __ProcessCave__NoObjectHandler
$7e1f     __ProcessCave__TurnTrailerToBaseType
$7e21     __ProcessCave__NextCell
$7e25     __ProcessCave__BumpUpCellPtrHigh
$7e27     __ProcessCave__IncX
$7e2f     __ProcessCave__NextRow
$7e3e     _NumTo3DigitDigits__Data_
$7e41  NumTo3DigitDigits
$7e45     NumTo3DigitDigits__ZeroDigit
$7e4a     NumTo3DigitDigits__CheckForTrivialCase
$7e4e     NumTo3DigitDigits__NonTrivialCase
$7e51     NumTo3DigitDigits__IncrementResultLoop
$7e61     NumTo3DigitDigits__CheckIfDone
$7e65     NumTo3DigitDigits__Exit
$7e66     LevelSequenceAndBonusLevelStatusArray
$7e8e  BufferLevel
$7e94     __BufferLevel__DoBuffer

$7e9e [<] CaveAData
$7ea0 [r] LevelOffsetArray
$7ea5 [>] CaveAData
$7ea7 [r] LevelOffsetArray

$7eae     __BufferLevel__CopyElement
$7eb8     __BufferLevel__InitRandomSeedAndColours
$7edc  InitGameVariablesFromLevelData
$7f7d     __InitGameVariablesFromLevelData__TwoJoysticksOnePlayer
$7f81     __InitGameVariablesFromLevelData__NotTwoJoysticksOnePlayer
$7f87     __InitGameVariablesFromLevelData__CaveB
$7f89     __InitGameVariablesFromLevelData__NotCaveB
$7f97     __InitGameVariablesFromLevelData__NotBonusCave
$7f9b     __InitGameVariablesFromLevelData__BonusCave
$7f9e  SetTopLineTextToGameOverAndDelay
$7fad  WaitForDelayOrNextPlayersButton
$7faf     __WaitForDelayOrNextPlayersButton__OuterDelayLoop
$7fb1     __WaitForDelayOrNextPlayersButton__InnerDelayLoop
$7fb5     __WaitForDelayOrNextPlayersButton__NotBonusLevel
$7fbc     __WaitForDelayOrNextPlayersButton__IsBonusLevel
$7fbe     __WaitForDelayOrNextPlayersButton__ReadButton
$7fc3     __WaitForDelayOrNextPlayersButton__Pressed
$7fc7     __WaitForDelayOrNextPlayersButton__NotPressed
$7fce  OutOfTimeLoop
$8006     ProcessBonusLevelAndInterLevelInfoDisplay
$802e  PostCaveRunActions
$8034     __PostRunCaveActions__TimeLimitReached
$8040     __PostRunCaveActions__CheckIfGameOver
$8044     __PostRunCaveActions__GameOver
$8052     __PostRunCaveActions__NotGameOver
$806e-$809d DecompressedLevelRowPointerArray
$809e  ExecuteLevelDrawCommands__SetOutputPointer
$80b2  ExecuteLevelDrawCommands__OutputSingle
$80bc-$80cb ExecuteLevelDrawCommands__DrawLine__StepTable
$80cc  ExecuteLevelDrawCommands__DrawLine
$80da     __ExecuteLevelDrawCommands__DrawLine__Next
$80f2     __ExecuteLevelDrawCommands__DrawLine__Finished
$80f3  ExecuteLevelDrawCommands__OutputLine
$8100  ExecuteLevelDrawCommands__DrawFilledRect
$8107     __ExecuteLevelDrawCommands__DrawFilledRect__NextLine
$810d     __ExecuteLevelDrawCommands__DrawFilledRect__NextCell
$8117     __ExecuteLevelDrawCommands__DrawFilledRect__LineFinished
$8127     __ExecuteLevelDrawCommands__DrawFilledRect__Finished
$8128  ExecuteLevelDrawCommands__OutputFilledRect
$813f  ExecuteLevelDrawCommands__OutputRect
$816f     ExecuteLevelDrawCommands__Advance3Bytes
$8175     ExecuteLevelDrawCommands__Advance5Bytes
$817b     ExecuteLevelDrawCommands__Advance6Bytes
$8180  ExecuteLevelDrawCommands
$8184     __ExecuteLevelDrawCommands__MainLoop
$8195     __ExecuteLevelDrawCommands__IsRockford
$819f     __ExecuteLevelDrawCommands__GenericElementProcessing
$81b8     __ExecuteLevelDrawCommands__SwitchOnCommand
$81bf     __ExecuteLevelDrawCommands__Case_SingleObject
$81cc     __ExecuteLevelDrawCommands__Case_Line
$81d9     __ExecuteLevelDrawCommands__Case_FilledRect
$81e6     __ExecuteLevelDrawCommands__Case_Rect
$81ec     __ExecuteLevelDrawCommands__NextElement
$81ef     __ExecuteLevelDrawCommands__Exit
$81f0  TitleScreenFillInPlayerAndJoystick
$820e     __TitleScreenFillInPlayerAndJoystick__Exit
$820f  FrameLevelWithSteelWall
$8227  SetupTitleScreenText
$824a     __SetupTitleScreenText__CreditsMode
$824e     __SetupTitleScreenText__ByPeterLiepaLoop
$8265     __SetupTitleScreenText__WithChrisGreyLoop
$827c     __SetupTitleScreenText__PressButtonToPlayLoop
$828f     __SetupTitleScreenText__JumpToPart2
$8292     __SetupTitleScreenText__ScoresMode
$8296     __SetupTitleScreenText__Plyr1Ply2Loop
$82d7     __SetupTitleScreenText__Part2
$82db     __SetupTitleScreenText__F1TextLine5Loop
$82f2     __SetupTitleScreenText__F1TextLine4Loop
$8379     LevelActiveAnimations
$838d  MakeF1ScreenControlsLightBlue
$83a1     MakeFirstTwoLinesYellow
$83ac  MusicTickRoutine
$83ba     __MusicTickRoutine__NextNote
$83fd     __MusicTickRoutine__TweakCurrentNote
$842e  ScrollingBGUpdateFillChars
$8446  TitleIRQActions
$844a     __TitleIRQActions__Zero
$8451     __TitleIRQActions__NotZero
$8459     __TitleIRQActions__GtEq4
$8463     __TitleIRQActions__Lt4
$8466     __TitleIRQActions__Return
$8467  HandleNumPlayersAndJoysticks
$846d     __HandleNumPlayersAndJoysticks__F3Pressed
$847a     __HandleNumPlayersAndJoysticks__Is4
$8485     __HandleNumPlayersAndJoysticks__Not4
$848b     __HandleNumPlayersAndJoysticks__Is2
$848d     __HandleNumPlayersAndJoysticks__Not2
$8493     __HandleNumPlayersAndJoysticks__Is3
$8495     __HandleNumPlayersAndJoysticks__Not3
$84a2  HandleCaveAndLevelSecection
$84b2     __HandleCaveAndLevelSecection__Down
$84bc     __HandleCaveAndLevelSecection__Up
$84d5     __HandleCaveAndLevelSecection__Left
$84e6     __HandleCaveAndLevelSecection__Right
$8514     __HandleCaveAndLevelSecection__Centered
$8518  TitleScreenLoop
$8522     __TitleScreenLoop__LicenseMode
$8535     __TitleScreenLoop__F1Pressed
$8543     TitleScreenLoop__NotLicenseMode
$8584     __TitleScreenLoop__F1NotPressed
$859b  RunTitleScreen
$85d4     __RunTitleScreen__DemoMode
$85db     __RunTitleScreen__GameMode
$860b     RastIntTitleModeVICRegs
$8606     TitleModeVICColourRegs
$8613-$861a RastIntGameModeVICRegs
$861b  SetupTitleScreen
$8675  IRQHandler
$867f     __IRQHandler__Raster
$8683     __IRQHandler__InMarquee
$8687     __IRQHandler__InBody
$869d     __IRQHandler__Mandatory_Processing
$86a0     __IRQHandler__ScanKeyboardRow0
$86ac     __IRQHandler__KeyInScanRow0
$86b0     __IRQHandler__KeyInScanRow0ScannedMoreThanOnce
$86b4     __IRQHandler__KeyInScanRow0ScannedFirstTime
$86b6     __IRQHanzdler__ScanKeyboardRow7
$86c2     __IRQHandler__KeyInScanRow7
$86c6     __IRQHandler__KeyInScanRow7ScannedMoreThanOnce
$86ca     __IRQHandler__KeyInScanRow7ScannedFirstTime
$86cc     __IRQHandler__DoneKeyScan
$86cf     __IRQHandler__SneakyEntryPoint
$86d5     __IRQHandler__InTitleScreen
$86f1     __IRQHandler__InGame
$8704     Sneaky_Returns_if_no_joystick_action_ELSE_Returns_to_IRQHandler_at_IRQHandler__SneakyEntryPoint
$871c     Sneaky__MessWithStack
$8721     Sneaky__NoJoystickAction
$8722  SetLevel
$8746  InitPlayers
$876e  LoseLife
$8774     __LoseLife__BackupPlayer1__
$877f     __LoseLife__BackupPlayer2__
$8788     __LoseLife__NextPlayer__
$879f     __LoseLife__RestoreNewPlayer__
$87a3     __LoseLife__RestorePlayer1__
$87ae     __LoseLife__RestorePlayer2__
$87b7     __LoseLife__CheckIfGameOver__
$87c7     __LoseLife__Exit__
$87c8  ScoreTimeRemainingSound
$87cc     __ScoreTimeRemainingSound__Loop
$87fa  UpdateHighScoreIfNeeded
$8822  StashScores
$8841  NextCave
$8859  CaveComplete
$887b     __CaveComplete__ScoreTimeRemainingLoop
$8897  KillPlayer
$88ab  PerformCaveExitAction
$88b3     __PerformCaveExitAction__Complete
$88b9     __PerformCaveExitAction__NotComplete
$88bd     __PerformCaveExitAction__BonusLevel
$88c3     __PerformCaveExitAction__NotBonusLevel
$88c6     __PerformCaveExitAction__CaveExitActions
$88ca     __PerformCaveExitAction__NotDemoMode
$88e1     __PerformCaveExitAction__OneLifeLeft
$88f6     __PerformCaveExitAction__DemoMode
$88fb  RunCave
$8913  DemoModeRunCave
$891b     __DemoModeRunCave__Loop
$893a     __DemoModeRunCave__RepeatMove
$894f     __DemoModeRunCave__Exit
$895e  ResetLastAndHighScoresAndPlayerInfoText
$8960     __ResetLastAndHighScoresAndPlayerInfoText__Loop
$8a15  InitGameState
$8a50     __InitGameState__OneTimeInit
$8a80     __InitGameState__Exit
$8a81  RasterSetTitleMode
$8aa6     [<] IRQHandler
$8aab     [>] IRQHandler
$8ab2  NMIHandler
$8ab3  Main
$8adf     [<] NMIHandler
$8ae4     [>] NMIHandler
$8af8     [<] CopyInflatedCaveSubsetToBackBuffer
$8afe     [>] CopyInflatedCaveSubsetToBackBuffer
$8b12     [<] InflatedCave
$8b16     [>] InflatedCave
$8b2f     Main__BEGIN__Is_Level_Zero
$8b33     Main__Level_Is_Zero
$8b5a     Main__Level_Not_Zero
$8b7a     Main__ClearSpaceChar
$8b7e     Main__ClearSpaceCharLoop
$8b86-$8fff PartialSymbolTable
$9800     MusicDataIndex
$9801     MusicLoopedCount
$9804     SeededRandTemp1
$9805     SeededRandTemp2
$9806     __OutOfTimeLoop__Counter
$9807     BackBufferVICMemControl
$9802     AmoebaCellCountThisTick
$9803     AmoebaCellCountPreviousTick
$980b     PlayRevealLevelSoundAndRedefineChar__SFXPhase
$980C     MusicTickRoutine__Voice1SustainLevel
$9826     CurrentLastScoreText
$9812     CurrentHighScoreText
$983a     CurrentPlayerScoresText
$983b     DiamondQuotaString
$983e     DiamondValueString
$983f     DiamondValueString_2ndChar
$9844     TimeLeftText
$9848     ScoreChars
$984e     CurrentPlayerInfoText
$9862     TopLineBackup
$987d     Voice1SIDRegsBuffer
$9e00-$9f38 MOVEDCopyInflatedCaveSubsetToBackBuffer
$00b7     RockfordMoveSucceededFlag
$00b8     FireButtonStatus
$2000-$23ff     CopiedTitleChar
$3100-$33ff     CopiedGameCharData
$5000-$53af     TitleCharData

$582e-$585e CaveAData
$585f-$58b7 CaveBData
$58b8-$58de CaveCData
$58df-$5929 CaveDData
$592a-$59b0 CaveEData
$59b1-$5a41 CaveFData
$5a42-$5a89 CaveGData
$5a8a-$5ae0 CaveHData
$5ae1-$5b23 CaveIData
$5b24-$5b88 CaveJData
$5b89-$5bee CaveKData
$5bef-$5c58 CaveLData
$5c59-$5c96 CaveMData
$5c97-$5cf0 CaveNData
$5cf1-$5d2b CaveOData
$5d2c-$5d8a CavePData
$5d8b-$5dc6 CaveBonusQData
$5dc7-$5e1c CaveBonusRData
$5e1d-$5e5a CaveBonusSData
$5e5b-$5ea7 CaveBonusTData

$5ea8       DemoMoveData
$5f28-$5f67 BaseCharNoForObjectTable
$5f68-$5f69 ObjHandlerVectorTable
$6ced  PseudoRandom
$6da5-$6dab ExplosionSIDVoiceTable
$6db4  TestForRockfordOrAmoeba
$6dc0     TestForRockfordOrAmoeba__Finished
$6dc1  TestForExplosionByContactWithRockfordOrAmoeba
$6dda  ProcessFirefly
$6de9     ProcessFirefly__NoExplosion
$6e05     ProcessFirefly__CantTurnLeft
$6e19     ProcessFirefly__CantMoveStraightAhead
$6e28  FallingDiamondSoundFX
$6e2d     FallingDiamondSoundFX__Loop
$6e4f-$6e55 FallingBoulderSIDVoiceTable
$6e56  FallingBoulderSoundFX
$6e5b     FallingBoulderSoundFX__Loop
$6e65  TestIfObjectSlippery
$6e6d     TestIfObjectSlippery_NotOnBoulder
$6e73     TestIfObjectSlippery_NotOnDiamond
$6e79     TestIfObjectSlippery_NotOnBrickWall
$6e7c  CheckIfFallingObjectKillsAnimal
$6e92     CheckIfFallingObjectKillsAnimal_NotButterfly
$6eaa     CheckIfFallingObjectKillsAnimal_Finished
$6ead  ProcessButterfly
$6ebc     ProcessButterfly__NoExplosion
$6ed8     ProcessButterfly__CantTurnRight
$6eec     ProcessButterfly__CantMoveStraightAhead
$6f05  ProcessFallingDiamond
$6f13     ProcessFallingDiamond__NoSpaceBelow
$6f1f     ProcessFallingDiamond__MagicWallAlreadyActivated
$6f2e     ProcessFallingDiamond__ClearDiamondAboveMagicWall
$6f34     ProcessFallingDiamond__NoMagicWallBelow
$6f54     ProcessFallingDiamond__CantFallLeft
$6f68     ProcessFallingDiamond__CantFallRight
$6f6b     ProcessFallingDiamond__NotSlipperyHit
$6f79     ProcessFallingDiamond__DidntHitRockford
$6f84     ProcessFallingDiamond__DidntHitAnimal
$6f87  ProcessStationaryDiamond
$6f98     ProcessStationaryDiamond__NoSpaceBelow
$6fb5     ProcessStationaryDiamond__CantFallLeft
$6fc9     ProcessStationaryDiamond__Finished
$718a     RockfordCollectingDiamondSIDValues
$71ab  RockfordTriesToMoveBoulder
$71bd  TryToMoveRockford
$71cd     TryToMoveRockford__NotSpace
$71d9     TryToMoveRockford__NotDirt
$71e0     TryToMoveRockford__NotDiamond
$71ee     TryToMoveRockford__NotOutbox
$71ff     TryToMoveRockford__CantMoveBoulderLeft
$7201     TryToMoveRockford__NotMovingBoulderLeft
$720e     TryToMoveRockford__CantMoveBoulderRight
$7210     TryToMoveRockford__Finished
$7211  MoveRockfordIfPossible
$7227     MoveRockfordIfPossible__FireNotPressed
$7235     MoveRockfordIfPossible__CantMove
$72b7-$72c0 ExplodeToSpaceObjectSequenceTable
$72c1-$72ca ExplodeToDiamondObjectSequenceTable
$72cb-$72d2 PreRockfordObjectSequenceTable
$72d3  ProcessExplosion
$72d9     ProcessExplosion__FindSequenceLoop
$72e1     ProcessExplosion__SequenceNotMatched
$7360  ProcessStationaryBoulder
$7371     ProcessStationaryBoulder__NoSpaceBelow
$738e     ProcessStationaryBoulder__CantFallLeft
$73a2     ProcessStationaryBoulder__Finished
$73a5  CreateScannedStationaryBoulder
$73ad  ProcessFallingBoulder
$73bb     ProcessFallingBoulder__NoSpaceBelow
$73c7     ProcessFallingBoulder__MagicWallAlreadyActivated
$73d6     ProcessFallingBoulder__ClearBoulderAboveMagicWall
$73e0     ProcessFallingBoulder__NoMagicWallBelow
$7400     ProcessFallingBoulder__CantFallLeft
$7414     ProcessFallingBoulder__CantFallRight
$741a     ProcessFallingBoulder__NotSlipperyHit
$7428     ProcessFallingBoulder__DidntHitRockford
$7433     ProcessFallingBoulder__DidntHitAnimal
$748c     _AnimateBkgndLoop
$77fe     UncoverCaveScreen
$7c91  InstallRandomCaveObjectForCell
$7c98     _RandomObjTestLoop
$7ca0     _NotThisRandomObject
$81c8     _CmdNotSingleObj
$81d5     _CmdNotLine
$81e2     _CmdNotFilledRect
$8317-$8378 MusicNoteToFreqTable
$83d8 [r] MusicNoteToFreqTable
$83e9 [r] MusicNoteToFreqTable
$897a  InitAll
$897e     _InitBlankTopLine
$8986     _InitBlankRestOfScreen
$89a1     _InitCopyCharsAndTheme
}

memmap
{
    $5000-$53af bitmap
    {
        mcm = True
        standard = 4, 5
        palette = 0, 1
        mcmpalette = 0, 6, $e, 9

    }
    $53b0-$5405 data
    $5406-$5805 bitmap
    {
        mcm = True
        mcmpalette = 0, 10, 4, 9
    }
    $5806-$5f67 data
    $5f68-$5fe7 ptr16
    {
        symbol_bypass = 0
    }
    $5fe8-$60e7 data
    $60e8-$63e7 bitmap
    {
        first_number = $20
        mcm = True
        mcmpalette = 0, 8, $b, 9
    }
    $63e8-$66e7 bitmap
    {
        mcm = True
        mcmpalette = 0, 8, $b, $9
    }
    $66e8-$6acf data
    $6ad0-$6b7b code
    $6b7c-$6c7f data
    $6c80-$6da4 code
    $6da5-$6db3 data
    $6db4-$6e4e code
    $6e4f-$6e55 data
    $6e56-$6fcb code
    $6fcc-$6fcf data
    $6fd0-$707f code
    $7080-$7086 data
    $7087-$7189 code
    $718a-$7190 data
    $7191-$72b6 code
    $72b7-$72d2 data
    $72d3-$749a code
    $749b-$74b2 data
    $74b3-$74d7 code
    $74d8-$74df data
    $74e0-$7ccc code
    $7ccd-$7cd1 data
    $7cd2-$7e3d code
    $7e3e-$7e40 data
    $7e41-$7e65 code
    $7e66-$7e8d data
    $7e8e-$806d code
    $806e-$809d ptr16
    $809e-$80bb code
    $80bc-$80cb data
    $80cc-$8316 code
    $8317-$838c data
    $838d-$8605 code
    $8606-$861a data
    $861b-$8b85 code
    $8b86-$8fff data

    $9e00-$9f38 code < $7b58
}
